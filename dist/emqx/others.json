[
  {
    "fields": [
      {
        "name": "listeners",
        "type": {
          "kind": "struct",
          "name": "broker:listeners"
        }
      },
      {
        "desc": "A zone is a set of configs grouped by the zone <code>name</code>.\nFor flexible configuration mapping, the <code>name</code> can be set to a listener's <code>zone</code> config.\nNOTE: A built-in zone named <code>default</code> is auto created and can not be deleted.\n",
        "name": "zones",
        "type": {
          "kind": "map",
          "name": "name",
          "values": {
            "kind": "struct",
            "name": "broker:zone"
          }
        }
      },
      {
        "desc": "Global MQTT configuration.\nThe configs here work as default values which can be overridden in <code>zone</code> configs\n",
        "name": "mqtt",
        "type": {
          "kind": "struct",
          "name": "broker:mqtt"
        }
      },
      {
        "desc": "Default authentication configs for all MQTT listeners.\n\nFor per-listener overrides see <code>authentication</code> in listener configs\n\nThis option can be configured with:\n<ul>\n  <li><code>[]</code>: The default value, it allows *ALL* logins</li>\n  <li>one: For example <code>{enable:true,backend:\"built_in_database\",mechanism=\"password_based\"}</code></li>\n  <li>chain: An array of structs.</li>\n</ul>\n\nWhen a chain is configured, the login credentials are checked against the backends per the configured order, until an 'allow' or 'deny' decision can be made.\n\nIf there is no decision after a full chain exhaustion, the login is rejected.\n",
        "name": "authentication",
        "type": {
          "elements": {
            "kind": "union",
            "members": [
              {
                "kind": "struct",
                "name": "authn-builtin_db:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mysql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-postgresql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:replica-set"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:sharded-cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-redis:cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:sentinel"
              },
              {
                "kind": "struct",
                "name": "authn-http:get"
              },
              {
                "kind": "struct",
                "name": "authn-http:post"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:hmac-based"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:public-key"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:jwks"
              },
              {
                "kind": "struct",
                "name": "authn-scram-builtin_db:authentication"
              }
            ]
          },
          "kind": "array"
        }
      },
      {
        "desc": "\nAuthorization a.k.a. ACL.<br/>\nIn EMQX, MQTT client access control is extremely flexible.<br/>\nAn out-of-the-box set of authorization data sources are supported.\nFor example,<br/>\n'file' source is to support concise and yet generic ACL rules in a file;<br/>\n'built_in_database' source can be used to store per-client customizable rule sets,\nnatively in the EMQX node;<br/>\n'http' source to make EMQX call an external HTTP API to make the decision;<br/>\n'PostgreSQL' etc. to look up clients or rules from external databases;<br/>\n",
        "name": "authorization",
        "type": {
          "kind": "struct",
          "name": "authorization"
        }
      },
      {
        "name": "node",
        "type": {
          "kind": "struct",
          "name": "node"
        }
      },
      {
        "name": "cluster",
        "type": {
          "kind": "struct",
          "name": "cluster"
        }
      },
      {
        "name": "log",
        "type": {
          "kind": "struct",
          "name": "log"
        }
      },
      {
        "name": "rpc",
        "type": {
          "kind": "struct",
          "name": "rpc"
        }
      },
      {
        "desc": "Message broker options.",
        "name": "broker",
        "type": {
          "kind": "struct",
          "name": "broker"
        }
      },
      {
        "desc": "System topics configuration.",
        "name": "sys_topics",
        "type": {
          "kind": "struct",
          "name": "broker:sys_topics"
        }
      },
      {
        "name": "force_shutdown",
        "type": {
          "kind": "struct",
          "name": "broker:force_shutdown"
        }
      },
      {
        "name": "overload_protection",
        "type": {
          "kind": "struct",
          "name": "broker:overload_protection"
        }
      },
      {
        "name": "force_gc",
        "type": {
          "kind": "struct",
          "name": "broker:force_gc"
        }
      },
      {
        "name": "conn_congestion",
        "type": {
          "kind": "struct",
          "name": "broker:conn_congestion"
        }
      },
      {
        "name": "stats",
        "type": {
          "kind": "struct",
          "name": "broker:stats"
        }
      },
      {
        "name": "sysmon",
        "type": {
          "kind": "struct",
          "name": "broker:sysmon"
        }
      },
      {
        "name": "alarm",
        "type": {
          "kind": "struct",
          "name": "broker:alarm"
        }
      },
      {
        "name": "flapping_detect",
        "type": {
          "kind": "struct",
          "name": "broker:flapping_detect"
        }
      },
      {
        "name": "persistent_session_store",
        "type": {
          "kind": "struct",
          "name": "broker:persistent_session_store"
        }
      },
      {
        "name": "trace",
        "type": {
          "kind": "struct",
          "name": "broker:trace"
        }
      },
      {
        "name": "bridges",
        "type": {
          "kind": "struct",
          "name": "bridge:bridges"
        }
      },
      {
        "name": "retainer",
        "type": {
          "kind": "struct",
          "name": "retainer"
        }
      },
      {
        "name": "statsd",
        "type": {
          "kind": "struct",
          "name": "statsd"
        }
      },
      {
        "name": "auto_subscribe",
        "type": {
          "kind": "struct",
          "name": "auto_subscribe"
        }
      },
      {
        "name": "delayed",
        "type": {
          "kind": "struct",
          "name": "modules:delayed"
        }
      },
      {
        "name": "telemetry",
        "type": {
          "kind": "struct",
          "name": "modules:telemetry"
        }
      },
      {
        "desc": "List of topic rewrite rules.",
        "name": "rewrite",
        "type": {
          "elements": {
            "kind": "struct",
            "name": "modules:rewrite"
          },
          "kind": "array"
        }
      },
      {
        "desc": "List of topics whose metrics are reported.",
        "name": "topic_metrics",
        "type": {
          "elements": {
            "kind": "struct",
            "name": "modules:topic_metrics"
          },
          "kind": "array"
        }
      },
      {
        "name": "plugins",
        "type": {
          "kind": "struct",
          "name": "plugin:plugins"
        }
      },
      {
        "name": "dashboard",
        "type": {
          "kind": "struct",
          "name": "dashboard"
        }
      },
      {
        "name": "gateway",
        "type": {
          "kind": "struct",
          "name": "gateway"
        }
      },
      {
        "name": "prometheus",
        "type": {
          "kind": "struct",
          "name": "prometheus"
        }
      },
      {
        "name": "rule_engine",
        "type": {
          "kind": "struct",
          "name": "rule_engine"
        }
      },
      {
        "name": "exhook",
        "type": {
          "kind": "struct",
          "name": "exhook"
        }
      },
      {
        "name": "psk_authentication",
        "type": {
          "kind": "struct",
          "name": "authn-psk:psk_authentication"
        }
      },
      {
        "name": "limiter",
        "type": {
          "kind": "struct",
          "name": "limiter"
        }
      },
      {
        "name": "connectors",
        "type": {
          "kind": "struct",
          "name": "connector:connectors"
        }
      },
      {
        "name": "slow_subs",
        "type": {
          "kind": "struct",
          "name": "slow_subs"
        }
      },
      {
        "desc": "Defines the EMQX Enterprise license. \n\n\nThe default license has 1000 connections limit, it is issued on 2022-04-19 and valid for 5 years (1825 days).\n\nEMQX comes with a default trial license.  For production use, please \nvisit https://www.emqx.com/apply-licenses/emqx to apply.",
        "name": "license",
        "type": {
          "kind": "struct",
          "name": "key_license"
        }
      }
    ],
    "full_name": "Root Config Keys",
    "paths": [],
    "tags": []
  },
  {
    "desc": "Settings for the alarms.",
    "fields": [
      {
        "default": {
          "hocon": "[log, publish]",
          "oneliner": true
        },
        "desc": "The actions triggered when the alarm is activated.<br/>Currently, the following actions are supported: <code>log</code> and <code>publish</code>.\n<code>log</code> is to write the alarm to log (console or file).\n<code>publish</code> is to publish the alarm as an MQTT message to the system topics:\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
        "examples": [
          [
            "log",
            "publish"
          ]
        ],
        "name": "actions",
        "raw_default": [
          "log",
          "publish"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "atom()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "1000",
          "oneliner": true
        },
        "desc": "The maximum total number of deactivated alarms to keep as history.<br/>When this limit is exceeded, the oldest deactivated alarms are deleted to cap the total number.\n",
        "examples": [
          1000
        ],
        "name": "size_limit",
        "raw_default": 1000,
        "type": {
          "kind": "primitive",
          "name": "1..3000"
        }
      },
      {
        "default": {
          "hocon": "\"24h\"",
          "oneliner": true
        },
        "desc": "Retention time of deactivated alarms. Alarms are not deleted immediately\nwhen deactivated, but after the retention time.\n",
        "examples": [
          [
            50,
            52,
            104
          ]
        ],
        "name": "validity_period",
        "raw_default": [
          50,
          52,
          104
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "broker:alarm",
    "paths": [
      "alarm"
    ],
    "tags": []
  },
  {
    "desc": "Message broker options.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable session registry",
        "name": "enable_session_registry",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "quorum",
          "oneliner": true
        },
        "desc": "Session locking strategy in a cluster.\n  - `local`: only lock the session on the current node\n  - `one`: select only one remote node to lock the session\n  - `quorum`: select some nodes to lock the session\n  - `all`: lock the session on all the nodes in the cluster\n",
        "name": "session_locking_strategy",
        "raw_default": "quorum",
        "type": {
          "kind": "enum",
          "symbols": [
            "local",
            "leader",
            "quorum",
            "all"
          ]
        }
      },
      {
        "default": {
          "hocon": "round_robin",
          "oneliner": true
        },
        "desc": "Dispatch strategy for shared subscription.\n  - `random`: dispatch the message to a random selected subscriber\n  - `round_robin`: select the subscribers in a round-robin manner\n  - `sticky`: always use the last selected subscriber to dispatch, until the subscriber disconnects.\n  - `hash`: select the subscribers by the hash of `clientIds`\n",
        "name": "shared_subscription_strategy",
        "raw_default": "round_robin",
        "type": {
          "kind": "enum",
          "symbols": [
            "random",
            "round_robin",
            "round_robin_per_group",
            "sticky",
            "local",
            "hash_topic",
            "hash_clientid"
          ]
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable/disable shared dispatch acknowledgement for QoS 1 and QoS 2 messages.\nThis should allow messages to be dispatched to a different subscriber in the group in case the picked (based on `shared_subscription_strategy`) subscriber is offline.\n",
        "name": "shared_dispatch_ack_enabled",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable batch clean for deleted routes.",
        "name": "route_batch_clean",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "name": "perf",
        "type": {
          "kind": "struct",
          "name": "broker:broker_perf"
        }
      },
      {
        "desc": "Per group dispatch strategy for shared subscription.\nThis config is a map from shared subscription group name to the strategy\nname. The group name should be of format `[A-Za-z0-9]`. i.e. no\nspecial characters are allowed.\n",
        "examples": [
          {
            "example_group": {
              "strategy": "random"
            }
          }
        ],
        "name": "shared_subscription_group",
        "type": {
          "kind": "map",
          "name": "name",
          "values": {
            "kind": "struct",
            "name": "broker:shared_subscription_group"
          }
        }
      }
    ],
    "full_name": "broker",
    "paths": [
      "broker"
    ],
    "tags": []
  },
  {
    "desc": "Broker performance tuning parameters.",
    "fields": [
      {
        "default": {
          "hocon": "key",
          "oneliner": true
        },
        "desc": "Performance tuning for subscribing/unsubscribing a wildcard topic.\nChange this parameter only when there are many wildcard topics.\n\nNOTE: when changing from/to `global` lock, it requires all nodes in the cluster to be stopped before the change.\n  - `key`: mnesia transactional updates with per-key locks. Recommended for a single-node setup.\n  - `tab`: mnesia transactional updates with table lock. Recommended for a cluster setup.\n  - `global`: updates are protected with a global lock. Recommended for large clusters.\n",
        "name": "route_lock_type",
        "raw_default": "key",
        "type": {
          "kind": "enum",
          "symbols": [
            "key",
            "tab",
            "global"
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable trie path compaction.\nEnabling it significantly improves wildcard topic subscribe rate, if wildcard topics have unique prefixes like: 'sensor/{{id}}/+/', where ID is unique per subscriber.\nTopic match performance (when publishing) may degrade if messages are mostly published to topics with large number of levels.\n\nNOTE: This is a cluster-wide configuration. It requires all nodes to be stopped before changing it.\n",
        "name": "trie_compaction",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "broker:broker_perf",
    "paths": [
      "broker.perf"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the authorization cache.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable or disable the authorization cache.",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "32",
          "oneliner": true
        },
        "desc": "Maximum number of cached items.",
        "name": "max_size",
        "raw_default": 32,
        "type": {
          "kind": "primitive",
          "name": "1..1048576"
        }
      },
      {
        "default": {
          "hocon": "\"1m\"",
          "oneliner": true
        },
        "desc": "Time to live for the cached data.  ",
        "name": "ttl",
        "raw_default": [
          49,
          109
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "broker:cache",
    "paths": [
      "authorization.cache"
    ],
    "tags": []
  },
  {
    "desc": "Settings for `conn_congestion` alarm.\n\nSometimes the MQTT connection (usually an MQTT subscriber) may\nget \"congested\", because there are too many packets to be sent.\nThe socket tries to buffer the packets until the buffer is\nfull. If more packets arrive after that, the packets will be\n\"pending\" in the queue, and we consider the connection\ncongested.\n\nNote: `sndbuf` can be set to larger value if the\nalarm is triggered too often.\nThe name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,\nwhere the `<ClientID>` is the client ID of the congested MQTT connection,\nand `<Username>` is the username or `unknown_user`.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable or disable connection congestion alarm.",
        "name": "enable_alarm",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"1m\"",
          "oneliner": true
        },
        "desc": "Minimal time before clearing the alarm.<br/>The alarm is cleared only when there's no pending data in<br/>the queue, and at least <code>min_alarm_sustain_duration</code>milliseconds passed since the last time we considered the connection 'congested'.<br/>This is to avoid clearing and raising the alarm again too often.",
        "name": "min_alarm_sustain_duration",
        "raw_default": [
          49,
          109
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "broker:conn_congestion",
    "paths": [
      "conn_congestion"
    ],
    "tags": []
  },
  {
    "desc": "Compression options.",
    "fields": [
      {
        "desc": "Compression level. ",
        "name": "level",
        "type": {
          "kind": "enum",
          "symbols": [
            "none",
            "default",
            "best_compression",
            "best_speed"
          ]
        }
      },
      {
        "default": {
          "hocon": "8",
          "oneliner": true
        },
        "desc": "\nSpecifies the size of the compression state.<br/>\nLower values decrease memory usage per connection.\n",
        "name": "mem_level",
        "raw_default": 8,
        "type": {
          "kind": "primitive",
          "name": "1..9"
        }
      },
      {
        "default": {
          "hocon": "default",
          "oneliner": true
        },
        "desc": "Specifies the compression strategy.",
        "name": "strategy",
        "raw_default": "default",
        "type": {
          "kind": "enum",
          "symbols": [
            "default",
            "filtered",
            "huffman_only",
            "rle"
          ]
        }
      },
      {
        "default": {
          "hocon": "takeover",
          "oneliner": true
        },
        "desc": "Takeover means the compression state is retained between server messages. ",
        "name": "server_context_takeover",
        "raw_default": "takeover",
        "type": {
          "kind": "enum",
          "symbols": [
            "takeover",
            "no_takeover"
          ]
        }
      },
      {
        "default": {
          "hocon": "takeover",
          "oneliner": true
        },
        "desc": "Takeover means the compression state is retained between client messages. ",
        "name": "client_context_takeover",
        "raw_default": "takeover",
        "type": {
          "kind": "enum",
          "symbols": [
            "takeover",
            "no_takeover"
          ]
        }
      },
      {
        "default": {
          "hocon": "15",
          "oneliner": true
        },
        "desc": "Specifies the size of the compression context for the server.",
        "name": "server_max_window_bits",
        "raw_default": 15,
        "type": {
          "kind": "primitive",
          "name": "8..15"
        }
      },
      {
        "default": {
          "hocon": "15",
          "oneliner": true
        },
        "desc": "Specifies the size of the compression context for the client.",
        "name": "client_max_window_bits",
        "raw_default": 15,
        "type": {
          "kind": "primitive",
          "name": "8..15"
        }
      }
    ],
    "full_name": "broker:deflate_opts",
    "paths": [
      "listeners.ws.$name.websocket.deflate_opts",
      "listeners.wss.$name.websocket.deflate_opts"
    ],
    "tags": []
  },
  {
    "desc": "Enable or disable client lifecycle event publishing.\n\nThe following options affect MQTT clients as well as\ngateway clients. The types of the clients\nare distinguished by the topic prefix:\n\n- For the MQTT clients, the format is:\n`$SYS/broker/<node>/clients/<clientid>/<event>`\n- For the Gateway clients, it is\n`$SYS/broker/<node>/gateway/<gateway-name>/clients/<clientid>/<event>`\n",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable to publish client connected event messages",
        "name": "client_connected",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable to publish client disconnected event messages.",
        "name": "client_disconnected",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable to publish event message that client subscribed a topic successfully.",
        "name": "client_subscribed",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable to publish event message that client unsubscribed a topic successfully.",
        "name": "client_unsubscribed",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "broker:event_names",
    "paths": [
      "sys_topics.sys_event_messages"
    ],
    "tags": []
  },
  {
    "desc": "This config controls the allowed maximum number of `CONNECT` packets received\nfrom the same clientid in a time frame defined by `window_time`.\nAfter the limit is reached, successive `CONNECT` requests are forbidden\n(banned) until the end of the time period defined by `ban_time`.",
    "fields": [
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable flapping connection detection feature.",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "15",
          "oneliner": true
        },
        "desc": "The maximum number of disconnects allowed for a MQTT Client in `window_time`",
        "name": "max_count",
        "raw_default": 15,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "\"1m\"",
          "oneliner": true
        },
        "desc": "The time window for flapping detection.",
        "name": "window_time",
        "raw_default": [
          49,
          109
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "\"5m\"",
          "oneliner": true
        },
        "desc": "How long the flapping clientid will be banned.",
        "name": "ban_time",
        "raw_default": [
          53,
          109
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "broker:flapping_detect",
    "paths": [
      "flapping_detect"
    ],
    "tags": []
  },
  {
    "desc": "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable forced garbage collection.",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "16000",
          "oneliner": true
        },
        "desc": "GC the process after this many received messages.",
        "name": "count",
        "raw_default": 16000,
        "type": {
          "kind": "primitive",
          "name": "0..inf"
        }
      },
      {
        "default": {
          "hocon": "\"16MB\"",
          "oneliner": true
        },
        "desc": "GC the process after specified number of bytes have passed through.",
        "name": "bytes",
        "raw_default": [
          49,
          54,
          77,
          66
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      }
    ],
    "full_name": "broker:force_gc",
    "paths": [
      "force_gc"
    ],
    "tags": []
  },
  {
    "desc": "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable `force_shutdown` feature.",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "1000",
          "oneliner": true
        },
        "desc": "Maximum message queue length.",
        "name": "max_message_queue_len",
        "raw_default": 1000,
        "type": {
          "kind": "primitive",
          "name": "0..inf"
        }
      },
      {
        "default": {
          "hocon": "\"32MB\"",
          "oneliner": true
        },
        "desc": "Total heap size",
        "name": "max_heap_size",
        "raw_default": [
          51,
          50,
          77,
          66
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:wordsize()"
        }
      }
    ],
    "full_name": "broker:force_shutdown",
    "paths": [
      "force_shutdown"
    ],
    "tags": []
  },
  {
    "desc": "Socket options for SSL connections.",
    "fields": [
      {
        "desc": "\nTrusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
        "name": "cacertfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "\nPEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.\n",
        "name": "certfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "PEM format private key file. ",
        "name": "keyfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "verify_none",
          "oneliner": true
        },
        "desc": "Enable or disable peer verification. ",
        "name": "verify",
        "raw_default": "verify_none",
        "type": {
          "kind": "enum",
          "symbols": [
            "verify_peer",
            "verify_none"
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable TLS session reuse. ",
        "name": "reuse_sessions",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "10",
          "oneliner": true
        },
        "desc": "\nMaximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.<br/>\n",
        "name": "depth",
        "raw_default": 10,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "desc": "\nString containing the user's password.\nOnly used if the private key file is password-protected.\n",
        "examples": [
          ""
        ],
        "name": "password",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
          "oneliner": true
        },
        "desc": "\nAll TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.\n",
        "name": "versions",
        "raw_default": [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "atom()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "\nThis config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n",
        "name": "ciphers",
        "raw_default": [],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "\"emqx_tls_psk:lookup\"",
          "oneliner": true
        },
        "desc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity. ",
        "name": "user_lookup_fun",
        "raw_default": "emqx_tls_psk:lookup",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.\n",
        "name": "secure_renegotiate",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nPath to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br/>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.\n",
        "name": "dhfile",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nUsed together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).\n",
        "name": "fail_if_no_peer_cert",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nAn important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.\n",
        "name": "honor_cipher_order",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nIn protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.\n",
        "name": "client_renegotiation",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nMemory usage tuning. If enabled, will immediately perform a garbage collection after\nthe TLS/SSL handshake.\n",
        "name": "gc_after_handshake",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "broker:listener_ssl_opts",
    "paths": [
      "gateway.exproto.listeners.ssl.$name.ssl_options",
      "gateway.stomp.listeners.ssl.$name.ssl_options",
      "listeners.ssl.$name.ssl_options"
    ],
    "tags": []
  },
  {
    "desc": "Socket options for WebSocket/SSL connections.",
    "fields": [
      {
        "desc": "\nTrusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
        "name": "cacertfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "\nPEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.\n",
        "name": "certfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "PEM format private key file. ",
        "name": "keyfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "verify_none",
          "oneliner": true
        },
        "desc": "Enable or disable peer verification. ",
        "name": "verify",
        "raw_default": "verify_none",
        "type": {
          "kind": "enum",
          "symbols": [
            "verify_peer",
            "verify_none"
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable TLS session reuse. ",
        "name": "reuse_sessions",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "10",
          "oneliner": true
        },
        "desc": "\nMaximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.<br/>\n",
        "name": "depth",
        "raw_default": 10,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "desc": "\nString containing the user's password.\nOnly used if the private key file is password-protected.\n",
        "examples": [
          ""
        ],
        "name": "password",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
          "oneliner": true
        },
        "desc": "\nAll TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.\n",
        "name": "versions",
        "raw_default": [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "atom()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "\nThis config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n",
        "name": "ciphers",
        "raw_default": [],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "\"emqx_tls_psk:lookup\"",
          "oneliner": true
        },
        "desc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity. ",
        "name": "user_lookup_fun",
        "raw_default": "emqx_tls_psk:lookup",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.\n",
        "name": "secure_renegotiate",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nPath to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br/>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.\n",
        "name": "dhfile",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nUsed together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).\n",
        "name": "fail_if_no_peer_cert",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nAn important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.\n",
        "name": "honor_cipher_order",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nIn protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.\n",
        "name": "client_renegotiation",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "\nMaximum time duration allowed for the handshake to complete\n",
        "name": "handshake_timeout",
        "raw_default": [
          49,
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "broker:listener_wss_opts",
    "paths": [
      "listeners.wss.$name.ssl_options"
    ],
    "tags": []
  },
  {
    "desc": "MQTT listeners identified by their protocol type and assigned names",
    "fields": [
      {
        "desc": "TCP listeners.",
        "name": "tcp",
        "type": {
          "kind": "map",
          "name": "name",
          "values": {
            "kind": "struct",
            "name": "broker:mqtt_tcp_listener"
          }
        }
      },
      {
        "desc": "SSL listeners.",
        "name": "ssl",
        "type": {
          "kind": "map",
          "name": "name",
          "values": {
            "kind": "struct",
            "name": "broker:mqtt_ssl_listener"
          }
        }
      },
      {
        "desc": "HTTP websocket listeners.",
        "name": "ws",
        "type": {
          "kind": "map",
          "name": "name",
          "values": {
            "kind": "struct",
            "name": "broker:mqtt_ws_listener"
          }
        }
      },
      {
        "desc": "HTTPS websocket listeners.",
        "name": "wss",
        "type": {
          "kind": "map",
          "name": "name",
          "values": {
            "kind": "struct",
            "name": "broker:mqtt_wss_listener"
          }
        }
      },
      {
        "desc": "QUIC listeners.",
        "name": "quic",
        "type": {
          "kind": "map",
          "name": "name",
          "values": {
            "kind": "struct",
            "name": "broker:mqtt_quic_listener"
          }
        }
      }
    ],
    "full_name": "broker:listeners",
    "paths": [
      "listeners"
    ],
    "tags": []
  },
  {
    "desc": "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin <code>zone</code> configs",
    "fields": [
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "After the TCP connection is established, if the MQTT CONNECT packet from the client is not received within the time specified by <code>idle_timeout</code>, the connection will be disconnected.",
        "name": "idle_timeout",
        "raw_default": [
          49,
          53,
          115
        ],
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "infinity"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:duration()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"1MB\"",
          "oneliner": true
        },
        "desc": "Maximum MQTT packet size allowed.",
        "name": "max_packet_size",
        "raw_default": [
          49,
          77,
          66
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "default": {
          "hocon": "65535",
          "oneliner": true
        },
        "desc": "Maximum allowed length of MQTT Client ID.",
        "name": "max_clientid_len",
        "raw_default": 65535,
        "type": {
          "kind": "primitive",
          "name": "23..65535"
        }
      },
      {
        "default": {
          "hocon": "128",
          "oneliner": true
        },
        "desc": "Maximum topic levels allowed.",
        "name": "max_topic_levels",
        "raw_default": 128,
        "type": {
          "kind": "primitive",
          "name": "1..65535"
        }
      },
      {
        "default": {
          "hocon": "2",
          "oneliner": true
        },
        "desc": "Maximum QoS allowed.",
        "name": "max_qos_allowed",
        "raw_default": 2,
        "type": {
          "kind": "primitive",
          "name": "qos()"
        }
      },
      {
        "default": {
          "hocon": "65535",
          "oneliner": true
        },
        "desc": "Maximum topic alias, 0 means no topic alias supported.",
        "name": "max_topic_alias",
        "raw_default": 65535,
        "type": {
          "kind": "primitive",
          "name": "0..65535"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Whether to enable support for MQTT retained message.",
        "name": "retain_available",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Whether to enable support for MQTT wildcard subscription.",
        "name": "wildcard_subscription",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Whether to enable support for MQTT shared subscription.",
        "name": "shared_subscription",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Whether to enable support for MQTT exclusive subscription.",
        "name": "exclusive_subscription",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Ignore loop delivery of messages for MQTT v3.1.1/v3.1.0, similar to <code>No Local</code> subscription option in MQTT 5.0.",
        "name": "ignore_loop_deliver",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Parse MQTT messages in strict mode.\nWhen set to true, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected",
        "name": "strict_mode",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"\"",
          "oneliner": true
        },
        "desc": "Specify the response information returned to the client. This feature is disabled if is set to \"\". Applies only to clients using MQTT 5.0.",
        "name": "response_information",
        "raw_default": "",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "disabled",
          "oneliner": true
        },
        "desc": "The keep alive that EMQX requires the client to use. If configured as <code>disabled</code>, it means that the keep alive specified by the client will be used. Requires <code>Server Keep Alive</code> in MQTT 5.0, so it is only applicable to clients using MQTT 5.0 protocol.",
        "name": "server_keepalive",
        "raw_default": "disabled",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "integer()"
            },
            {
              "kind": "singleton",
              "name": "disabled"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "0.75",
          "oneliner": true
        },
        "desc": "The backoff multiplier used by the broker to determine the client keep alive timeout. If EMQX doesn't receive any packet in <code>Keep Alive * Backoff * 2</code> seconds, EMQX will close the current connection.",
        "name": "keepalive_backoff",
        "raw_default": 0.75,
        "type": {
          "kind": "primitive",
          "name": "number()"
        }
      },
      {
        "default": {
          "hocon": "infinity",
          "oneliner": true
        },
        "desc": "Maximum number of subscriptions allowed per client.",
        "name": "max_subscriptions",
        "raw_default": "infinity",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "1..inf"
            },
            {
              "kind": "singleton",
              "name": "infinity"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Force upgrade of QoS level according to subscription.",
        "name": "upgrade_qos",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "32",
          "oneliner": true
        },
        "desc": "Maximum number of QoS 1 and QoS 2 messages that are allowed to be delivered simultaneously before completing the acknowledgment.",
        "name": "max_inflight",
        "raw_default": 32,
        "type": {
          "kind": "primitive",
          "name": "1..65535"
        }
      },
      {
        "default": {
          "hocon": "\"30s\"",
          "oneliner": true
        },
        "desc": "Retry interval for QoS 1/2 message delivering.",
        "name": "retry_interval",
        "raw_default": [
          51,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "100",
          "oneliner": true
        },
        "desc": "For each publisher session, the maximum number of outstanding QoS 2 messages pending on the client to send PUBREL. After reaching this limit, new QoS 2 PUBLISH requests will be rejected with `147(0x93)` until either PUBREL is received or timed out.",
        "name": "max_awaiting_rel",
        "raw_default": 100,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "integer()"
            },
            {
              "kind": "singleton",
              "name": "infinity"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"300s\"",
          "oneliner": true
        },
        "desc": "For client to broker QoS 2 message, the time limit for the broker to wait before the `PUBREL` message is received. The wait is aborted after timed out, meaning the packet ID is freed for new `PUBLISH` requests. Receiving a stale `PUBREL` causes a warning level log. Note, the message is delivered to subscribers before entering the wait for PUBREL.",
        "name": "await_rel_timeout",
        "raw_default": [
          51,
          48,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "\"2h\"",
          "oneliner": true
        },
        "desc": "Specifies how long the session will expire after the connection is disconnected, only for non-MQTT 5.0 connections.",
        "name": "session_expiry_interval",
        "raw_default": [
          50,
          104
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "1000",
          "oneliner": true
        },
        "desc": "Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full.",
        "name": "max_mqueue_len",
        "raw_default": 1000,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "non_neg_integer()"
            },
            {
              "kind": "singleton",
              "name": "infinity"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "disabled",
          "oneliner": true
        },
        "desc": "Topic priorities. Priority number [1-255]\nThere's no priority table by default, hence all messages are treated equal.\n\n**NOTE**: Comma and equal signs are not allowed for priority topic names.\n**NOTE**: Messages for topics not in the priority table are treated as either highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.\n\n**Examples**:\nTo configure <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>\n",
        "name": "mqueue_priorities",
        "raw_default": "disabled",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "map()"
            },
            {
              "kind": "singleton",
              "name": "disabled"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "lowest",
          "oneliner": true
        },
        "desc": "Default topic priority, which will be used by topics not in <code>Topic Priorities</code> (<code>mqueue_priorities</code>).",
        "name": "mqueue_default_priority",
        "raw_default": "lowest",
        "type": {
          "kind": "enum",
          "symbols": [
            "highest",
            "lowest"
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Specifies whether to store QoS 0 messages in the message queue while the connection is down but the session remains.",
        "name": "mqueue_store_qos0",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Whether to user Client ID as Username.\nThis setting takes effect later than <code>Use Peer Certificate as Username</code> (<code>peer_cert_as_username</code>) and <code>Use peer certificate as Client ID</code> (<code>peer_cert_as_clientid</code>).\n",
        "name": "use_username_as_clientid",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "disabled",
          "oneliner": true
        },
        "desc": "Use the CN, DN field in the peer certificate or the entire certificate content as Username. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: Take the CN field of the certificate as Username\n- <code>dn</code>: Take the DN field of the certificate as Username\n- <code>crt</code>: Take the content of the <code>DER</code> or <code>PEM</code> certificate as Username\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format as Username\n- <code>md5</code>: Take the MD5 value of the content of the <code>DER</code> or <code>PEM</code> certificate as Username\n",
        "name": "peer_cert_as_username",
        "raw_default": "disabled",
        "type": {
          "kind": "enum",
          "symbols": [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ]
        }
      },
      {
        "default": {
          "hocon": "disabled",
          "oneliner": true
        },
        "desc": "Use the CN, DN field in the peer certificate or the entire certificate content as Client ID. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: Take the CN field of the certificate as Client ID\n- <code>dn</code>: Take the DN field of the certificate as Client ID\n- <code>crt</code>: Take the content of the <code>DER</code> or <code>PEM</code> certificate as Client ID\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format as Client ID\n- <code>md5</code>: Take the MD5 value of the content of the <code>DER</code> or <code>PEM</code> certificate as Client ID\n",
        "name": "peer_cert_as_clientid",
        "raw_default": "disabled",
        "type": {
          "kind": "enum",
          "symbols": [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ]
        }
      }
    ],
    "full_name": "broker:mqtt",
    "paths": [
      "mqtt"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the MQTT over QUIC listener.",
    "fields": [
      {
        "desc": "Path to the certificate file.",
        "name": "certfile",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "desc": "Path to the secret key file. ",
        "name": "keyfile",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "[\"TLS_AES_256_GCM_SHA384\", \"TLS_AES_128_GCM_SHA256\", \"TLS_CHACHA20_POLY1305_SHA256\"]",
          "oneliner": true
        },
        "desc": "\nThis config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n\nNOTE: QUIC listener supports only 'tlsv1.3' ciphers<br/>\n",
        "name": "ciphers",
        "raw_default": [
          "TLS_AES_256_GCM_SHA384",
          "TLS_AES_128_GCM_SHA256",
          "TLS_CHACHA20_POLY1305_SHA256"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "How long a connection can go idle before it is gracefully shut down. 0 to disable",
        "name": "idle_timeout",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "\"10s\"",
          "oneliner": true
        },
        "desc": "How long a handshake can idle before it is discarded. ",
        "name": "handshake_idle_timeout",
        "raw_default": [
          49,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "\nHow often to send PING frames to keep a connection alive. 0 means disabled.\n",
        "name": "keep_alive_interval",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable listener. ",
        "name": "enabled",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "14567",
          "oneliner": true
        },
        "desc": "\nIP address and port for the listening socket.\n",
        "name": "bind",
        "raw_default": 14567,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "emqx_schema:ip_port()"
            },
            {
              "kind": "primitive",
              "name": "integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "16",
          "oneliner": true
        },
        "desc": "The size of the listener's receiving pool.",
        "name": "acceptors",
        "raw_default": 16,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "infinity",
          "oneliner": true
        },
        "desc": "The maximum number of concurrent connections allowed by the listener. ",
        "name": "max_connections",
        "raw_default": "infinity",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "infinity"
            },
            {
              "kind": "primitive",
              "name": "pos_integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"\"",
          "oneliner": true
        },
        "desc": "\nWhen publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username\n",
        "name": "mountpoint",
        "raw_default": "",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "default",
          "oneliner": true
        },
        "desc": "\nThe configuration zone to which the listener belongs.\n",
        "name": "zone",
        "raw_default": "default",
        "type": {
          "kind": "primitive",
          "name": "atom()"
        }
      },
      {
        "default": {
          "hocon": "{\n  connection {capacity = 1000, rate = \"1000/s\"}\n}\n",
          "oneliner": false
        },
        "desc": "\nType of the rate limit.\n",
        "name": "limiter",
        "raw_default": {
          "connection": {
            "capacity": 1000,
            "rate": "1000/s"
          }
        },
        "type": {
          "kind": "struct",
          "name": "limiter:listener_fields"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSet <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous<code>, it behaves like when set to <code>true</code> but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.\n",
        "name": "enable_authn",
        "raw_default": true,
        "type": {
          "kind": "enum",
          "symbols": [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        }
      }
    ],
    "full_name": "broker:mqtt_quic_listener",
    "paths": [
      "listeners.quic.$name"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the MQTT over SSL listener.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable listener. ",
        "name": "enabled",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "8883",
          "oneliner": true
        },
        "desc": "\nIP address and port for the listening socket.\n",
        "name": "bind",
        "raw_default": 8883,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "emqx_schema:ip_port()"
            },
            {
              "kind": "primitive",
              "name": "integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "16",
          "oneliner": true
        },
        "desc": "The size of the listener's receiving pool.",
        "name": "acceptors",
        "raw_default": 16,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "infinity",
          "oneliner": true
        },
        "desc": "The maximum number of concurrent connections allowed by the listener. ",
        "name": "max_connections",
        "raw_default": "infinity",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "infinity"
            },
            {
              "kind": "primitive",
              "name": "pos_integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"\"",
          "oneliner": true
        },
        "desc": "\nWhen publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username\n",
        "name": "mountpoint",
        "raw_default": "",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "default",
          "oneliner": true
        },
        "desc": "\nThe configuration zone to which the listener belongs.\n",
        "name": "zone",
        "raw_default": "default",
        "type": {
          "kind": "primitive",
          "name": "atom()"
        }
      },
      {
        "default": {
          "hocon": "{\n  connection {capacity = 1000, rate = \"1000/s\"}\n}\n",
          "oneliner": false
        },
        "desc": "\nType of the rate limit.\n",
        "name": "limiter",
        "raw_default": {
          "connection": {
            "capacity": 1000,
            "rate": "1000/s"
          }
        },
        "type": {
          "kind": "struct",
          "name": "limiter:listener_fields"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSet <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous<code>, it behaves like when set to <code>true</code> but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.\n",
        "name": "enable_authn",
        "raw_default": true,
        "type": {
          "kind": "enum",
          "symbols": [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        }
      },
      {
        "default": {
          "hocon": "[\"allow all\"]",
          "oneliner": true
        },
        "desc": "\nThe access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny\n",
        "name": "access_rules",
        "raw_default": [
          "allow all"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nEnable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/\n",
        "name": "proxy_protocol",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"3s\"",
          "oneliner": true
        },
        "desc": "\nTimeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.\n",
        "name": "proxy_protocol_timeout",
        "raw_default": [
          51,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "desc": "\nPer-listener authentication override.\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br/>\n\n",
        "name": "authentication",
        "type": {
          "elements": {
            "kind": "union",
            "members": [
              {
                "kind": "struct",
                "name": "authn-builtin_db:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mysql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-postgresql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:replica-set"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:sharded-cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-redis:cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:sentinel"
              },
              {
                "kind": "struct",
                "name": "authn-http:get"
              },
              {
                "kind": "struct",
                "name": "authn-http:post"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:hmac-based"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:public-key"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:jwks"
              },
              {
                "kind": "struct",
                "name": "authn-scram-builtin_db:authentication"
              }
            ]
          },
          "kind": "array"
        }
      },
      {
        "name": "tcp_options",
        "type": {
          "kind": "struct",
          "name": "broker:tcp_opts"
        }
      },
      {
        "name": "ssl_options",
        "type": {
          "kind": "struct",
          "name": "broker:listener_ssl_opts"
        }
      }
    ],
    "full_name": "broker:mqtt_ssl_listener",
    "paths": [
      "listeners.ssl.$name"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the MQTT over TCP listener.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable listener. ",
        "name": "enabled",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "1883",
          "oneliner": true
        },
        "desc": "\nIP address and port for the listening socket.\n",
        "name": "bind",
        "raw_default": 1883,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "emqx_schema:ip_port()"
            },
            {
              "kind": "primitive",
              "name": "integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "16",
          "oneliner": true
        },
        "desc": "The size of the listener's receiving pool.",
        "name": "acceptors",
        "raw_default": 16,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "infinity",
          "oneliner": true
        },
        "desc": "The maximum number of concurrent connections allowed by the listener. ",
        "name": "max_connections",
        "raw_default": "infinity",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "infinity"
            },
            {
              "kind": "primitive",
              "name": "pos_integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"\"",
          "oneliner": true
        },
        "desc": "\nWhen publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username\n",
        "name": "mountpoint",
        "raw_default": "",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "default",
          "oneliner": true
        },
        "desc": "\nThe configuration zone to which the listener belongs.\n",
        "name": "zone",
        "raw_default": "default",
        "type": {
          "kind": "primitive",
          "name": "atom()"
        }
      },
      {
        "default": {
          "hocon": "{\n  connection {capacity = 1000, rate = \"1000/s\"}\n}\n",
          "oneliner": false
        },
        "desc": "\nType of the rate limit.\n",
        "name": "limiter",
        "raw_default": {
          "connection": {
            "capacity": 1000,
            "rate": "1000/s"
          }
        },
        "type": {
          "kind": "struct",
          "name": "limiter:listener_fields"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSet <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous<code>, it behaves like when set to <code>true</code> but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.\n",
        "name": "enable_authn",
        "raw_default": true,
        "type": {
          "kind": "enum",
          "symbols": [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        }
      },
      {
        "default": {
          "hocon": "[\"allow all\"]",
          "oneliner": true
        },
        "desc": "\nThe access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny\n",
        "name": "access_rules",
        "raw_default": [
          "allow all"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nEnable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/\n",
        "name": "proxy_protocol",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"3s\"",
          "oneliner": true
        },
        "desc": "\nTimeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.\n",
        "name": "proxy_protocol_timeout",
        "raw_default": [
          51,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "desc": "\nPer-listener authentication override.\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br/>\n\n",
        "name": "authentication",
        "type": {
          "elements": {
            "kind": "union",
            "members": [
              {
                "kind": "struct",
                "name": "authn-builtin_db:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mysql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-postgresql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:replica-set"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:sharded-cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-redis:cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:sentinel"
              },
              {
                "kind": "struct",
                "name": "authn-http:get"
              },
              {
                "kind": "struct",
                "name": "authn-http:post"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:hmac-based"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:public-key"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:jwks"
              },
              {
                "kind": "struct",
                "name": "authn-scram-builtin_db:authentication"
              }
            ]
          },
          "kind": "array"
        }
      },
      {
        "name": "tcp_options",
        "type": {
          "kind": "struct",
          "name": "broker:tcp_opts"
        }
      }
    ],
    "full_name": "broker:mqtt_tcp_listener",
    "paths": [
      "listeners.tcp.$name"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the MQTT over WebSocket listener.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable listener. ",
        "name": "enabled",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "8083",
          "oneliner": true
        },
        "desc": "\nIP address and port for the listening socket.\n",
        "name": "bind",
        "raw_default": 8083,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "emqx_schema:ip_port()"
            },
            {
              "kind": "primitive",
              "name": "integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "16",
          "oneliner": true
        },
        "desc": "The size of the listener's receiving pool.",
        "name": "acceptors",
        "raw_default": 16,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "infinity",
          "oneliner": true
        },
        "desc": "The maximum number of concurrent connections allowed by the listener. ",
        "name": "max_connections",
        "raw_default": "infinity",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "infinity"
            },
            {
              "kind": "primitive",
              "name": "pos_integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"\"",
          "oneliner": true
        },
        "desc": "\nWhen publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username\n",
        "name": "mountpoint",
        "raw_default": "",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "default",
          "oneliner": true
        },
        "desc": "\nThe configuration zone to which the listener belongs.\n",
        "name": "zone",
        "raw_default": "default",
        "type": {
          "kind": "primitive",
          "name": "atom()"
        }
      },
      {
        "default": {
          "hocon": "{\n  connection {capacity = 1000, rate = \"1000/s\"}\n}\n",
          "oneliner": false
        },
        "desc": "\nType of the rate limit.\n",
        "name": "limiter",
        "raw_default": {
          "connection": {
            "capacity": 1000,
            "rate": "1000/s"
          }
        },
        "type": {
          "kind": "struct",
          "name": "limiter:listener_fields"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSet <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous<code>, it behaves like when set to <code>true</code> but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.\n",
        "name": "enable_authn",
        "raw_default": true,
        "type": {
          "kind": "enum",
          "symbols": [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        }
      },
      {
        "default": {
          "hocon": "[\"allow all\"]",
          "oneliner": true
        },
        "desc": "\nThe access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny\n",
        "name": "access_rules",
        "raw_default": [
          "allow all"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nEnable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/\n",
        "name": "proxy_protocol",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"3s\"",
          "oneliner": true
        },
        "desc": "\nTimeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.\n",
        "name": "proxy_protocol_timeout",
        "raw_default": [
          51,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "desc": "\nPer-listener authentication override.\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br/>\n\n",
        "name": "authentication",
        "type": {
          "elements": {
            "kind": "union",
            "members": [
              {
                "kind": "struct",
                "name": "authn-builtin_db:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mysql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-postgresql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:replica-set"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:sharded-cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-redis:cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:sentinel"
              },
              {
                "kind": "struct",
                "name": "authn-http:get"
              },
              {
                "kind": "struct",
                "name": "authn-http:post"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:hmac-based"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:public-key"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:jwks"
              },
              {
                "kind": "struct",
                "name": "authn-scram-builtin_db:authentication"
              }
            ]
          },
          "kind": "array"
        }
      },
      {
        "name": "tcp_options",
        "type": {
          "kind": "struct",
          "name": "broker:tcp_opts"
        }
      },
      {
        "name": "websocket",
        "type": {
          "kind": "struct",
          "name": "broker:ws_opts"
        }
      }
    ],
    "full_name": "broker:mqtt_ws_listener",
    "paths": [
      "listeners.ws.$name"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the MQTT over WebSocket/SSL listener.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable listener. ",
        "name": "enabled",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "8084",
          "oneliner": true
        },
        "desc": "\nIP address and port for the listening socket.\n",
        "name": "bind",
        "raw_default": 8084,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "emqx_schema:ip_port()"
            },
            {
              "kind": "primitive",
              "name": "integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "16",
          "oneliner": true
        },
        "desc": "The size of the listener's receiving pool.",
        "name": "acceptors",
        "raw_default": 16,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "infinity",
          "oneliner": true
        },
        "desc": "The maximum number of concurrent connections allowed by the listener. ",
        "name": "max_connections",
        "raw_default": "infinity",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "infinity"
            },
            {
              "kind": "primitive",
              "name": "pos_integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"\"",
          "oneliner": true
        },
        "desc": "\nWhen publishing or subscribing, prefix all topics with a mountpoint string.\nThe prefixed string will be removed from the topic name when the message\nis delivered to the subscriber. The mountpoint is a way that users can use\nto implement isolation of message routing between different listeners.\nFor example if a client A subscribes to `t` with `listeners.tcp.\\<name>.mountpoint`\nset to `some_tenant`, then the client actually subscribes to the topic\n`some_tenant/t`. Similarly, if another client B (connected to the same listener\nas the client A) sends a message to topic `t`, the message is routed\nto all the clients subscribed `some_tenant/t`, so client A will receive the\nmessage, with topic name `t`.<br/>\nSet to `\"\"` to disable the feature.<br/>\n\nVariables in mountpoint string:\n  - <code>${clientid}</code>: clientid\n  - <code>${username}</code>: username\n",
        "name": "mountpoint",
        "raw_default": "",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "default",
          "oneliner": true
        },
        "desc": "\nThe configuration zone to which the listener belongs.\n",
        "name": "zone",
        "raw_default": "default",
        "type": {
          "kind": "primitive",
          "name": "atom()"
        }
      },
      {
        "default": {
          "hocon": "{\n  connection {capacity = 1000, rate = \"1000/s\"}\n}\n",
          "oneliner": false
        },
        "desc": "\nType of the rate limit.\n",
        "name": "limiter",
        "raw_default": {
          "connection": {
            "capacity": 1000,
            "rate": "1000/s"
          }
        },
        "type": {
          "kind": "struct",
          "name": "limiter:listener_fields"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSet <code>true</code> (default) to enable client authentication on this listener, the authentication\nprocess goes through the configured authentication chain.\nWhen set to <code>false</code> to allow any clients with or without authentication information such as username or password to log in.\nWhen set to <code>quick_deny_anonymous<code>, it behaves like when set to <code>true</code> but clients will be\ndenied immediately without going through any authenticators if <code>username</code> is not provided. This is useful to fence off\nanonymous clients early.\n",
        "name": "enable_authn",
        "raw_default": true,
        "type": {
          "kind": "enum",
          "symbols": [
            "true",
            "false",
            "quick_deny_anonymous"
          ]
        }
      },
      {
        "default": {
          "hocon": "[\"allow all\"]",
          "oneliner": true
        },
        "desc": "\nThe access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny\n",
        "name": "access_rules",
        "raw_default": [
          "allow all"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nEnable the Proxy Protocol V1/2 if the EMQX cluster is deployed behind HAProxy or Nginx.<br/>\nSee: https://www.haproxy.com/blog/haproxy/proxy-protocol/\n",
        "name": "proxy_protocol",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"3s\"",
          "oneliner": true
        },
        "desc": "\nTimeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.\n",
        "name": "proxy_protocol_timeout",
        "raw_default": [
          51,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "desc": "\nPer-listener authentication override.\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br/>\n\n",
        "name": "authentication",
        "type": {
          "elements": {
            "kind": "union",
            "members": [
              {
                "kind": "struct",
                "name": "authn-builtin_db:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mysql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-postgresql:authentication"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:replica-set"
              },
              {
                "kind": "struct",
                "name": "authn-mongodb:sharded-cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:standalone"
              },
              {
                "kind": "struct",
                "name": "authn-redis:cluster"
              },
              {
                "kind": "struct",
                "name": "authn-redis:sentinel"
              },
              {
                "kind": "struct",
                "name": "authn-http:get"
              },
              {
                "kind": "struct",
                "name": "authn-http:post"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:hmac-based"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:public-key"
              },
              {
                "kind": "struct",
                "name": "authn-jwt:jwks"
              },
              {
                "kind": "struct",
                "name": "authn-scram-builtin_db:authentication"
              }
            ]
          },
          "kind": "array"
        }
      },
      {
        "name": "tcp_options",
        "type": {
          "kind": "struct",
          "name": "broker:tcp_opts"
        }
      },
      {
        "name": "ssl_options",
        "type": {
          "kind": "struct",
          "name": "broker:listener_wss_opts"
        }
      },
      {
        "name": "websocket",
        "type": {
          "kind": "struct",
          "name": "broker:ws_opts"
        }
      }
    ],
    "full_name": "broker:mqtt_wss_listener",
    "paths": [
      "listeners.wss.$name"
    ],
    "tags": []
  },
  {
    "desc": "Overload protection mechanism monitors the load of the system and temporarily\ndisables some features (such as accepting new connections) when the load is high.",
    "fields": [
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "React on system overload or not.",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "1",
          "oneliner": true
        },
        "desc": "When at high load, some unimportant tasks could be delayed for execution, here set the duration in milliseconds precision.",
        "name": "backoff_delay",
        "raw_default": 1,
        "type": {
          "kind": "primitive",
          "name": "0..inf"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "When at high load, skip forceful GC.",
        "name": "backoff_gc",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "When at high load, skip process hibernation.",
        "name": "backoff_hibernation",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "When at high load, close new incoming connections.",
        "name": "backoff_new_conn",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "broker:overload_protection",
    "paths": [
      "overload_protection"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the built-in storage engine of persistent messages.",
    "fields": [
      {
        "default": {
          "hocon": "builtin",
          "oneliner": true
        },
        "desc": "",
        "name": "type",
        "raw_default": "builtin",
        "type": {
          "kind": "enum",
          "symbols": [
            "builtin"
          ]
        }
      },
      {
        "desc": "Performance tuning options for built-in session table.",
        "name": "session",
        "type": {
          "kind": "struct",
          "name": "broker:persistent_table_mria_opts"
        }
      },
      {
        "desc": "Performance tuning options for built-in session messages table.",
        "name": "session_messages",
        "type": {
          "kind": "struct",
          "name": "broker:persistent_table_mria_opts"
        }
      },
      {
        "desc": "Performance tuning options for built-in messages table.",
        "name": "messages",
        "type": {
          "kind": "struct",
          "name": "broker:persistent_table_mria_opts"
        }
      }
    ],
    "full_name": "broker:persistent_session_builtin",
    "paths": [
      "persistent_session_store.backend"
    ],
    "tags": []
  },
  {
    "desc": "Settings for message persistence.",
    "fields": [
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Use the database to store information about persistent sessions.\nThis makes it possible to migrate a client connection to another\ncluster node if a node is stopped.\n",
        "name": "enabled",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Save information about the persistent sessions on disc.\nIf this option is enabled, persistent sessions will survive full restart of the cluster.\nOtherwise, all the data will be stored in RAM, and it will be lost when all the nodes in the cluster are stopped.",
        "name": "on_disc",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Maintain a copy of the data in RAM for faster access.",
        "name": "ram_cache",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "{\n  messages {ram_cache = \"false\"}\n  session {ram_cache = \"true\"}\n  session_messages {ram_cache = \"true\"}\n  type = \"builtin\"\n}\n",
          "oneliner": false
        },
        "desc": "Database management system used to store information about persistent sessions and messages.\n- `builtin`: Use the embedded database (mria)",
        "name": "backend",
        "raw_default": {
          "messages": {
            "ram_cache": "false"
          },
          "session": {
            "ram_cache": "true"
          },
          "session_messages": {
            "ram_cache": "true"
          },
          "type": "builtin"
        },
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "struct",
              "name": "broker:persistent_session_builtin"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"1h\"",
          "oneliner": true
        },
        "desc": "The time messages that was not delivered to a persistent session\nis stored before being garbage collected if the node the previous\nsession was handled on restarts of is stopped.\n",
        "name": "max_retain_undelivered",
        "raw_default": [
          49,
          104
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "\"1h\"",
          "oneliner": true
        },
        "desc": "The starting interval for garbage collection of undelivered messages to\na persistent session. This affects how often the \"max_retain_undelivered\"\nis checked for removal.\n",
        "name": "message_gc_interval",
        "raw_default": [
          49,
          104
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "\"1m\"",
          "oneliner": true
        },
        "desc": "The starting interval for garbage collection of transient data for\npersistent session messages. This does not affect the lifetime length\nof persistent session messages.\n",
        "name": "session_message_gc_interval",
        "raw_default": [
          49,
          109
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "broker:persistent_session_store",
    "paths": [
      "persistent_session_store"
    ],
    "tags": []
  },
  {
    "desc": "Tuning options for the mria table.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Maintain a copy of the data in RAM for faster access.",
        "name": "ram_cache",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "broker:persistent_table_mria_opts",
    "paths": [
      "persistent_session_store.backend.messages",
      "persistent_session_store.backend.session",
      "persistent_session_store.backend.session_messages"
    ],
    "tags": []
  },
  {
    "desc": "Per group dispatch strategy for shared subscription",
    "fields": [
      {
        "default": {
          "hocon": "random",
          "oneliner": true
        },
        "desc": "Dispatch strategy for shared subscription.\n- `random`: dispatch the message to a random selected subscriber\n- `round_robin`: select the subscribers in a round-robin manner\n- `round_robin_per_group`: select the subscribers in round-robin fashion within each shared subscriber group\n- `sticky`: always use the last selected subscriber to dispatch,\nuntil the subscriber disconnects.\n- `hash`: select the subscribers by the hash of `clientIds`\n- `local`: send to a random local subscriber. If local\nsubscriber was not found, send to a random subscriber cluster-wide\n",
        "name": "strategy",
        "raw_default": "random",
        "type": {
          "kind": "enum",
          "symbols": [
            "random",
            "round_robin",
            "round_robin_per_group",
            "sticky",
            "local",
            "hash_topic",
            "hash_clientid"
          ]
        }
      }
    ],
    "full_name": "broker:shared_subscription_group",
    "paths": [
      "broker.shared_subscription_group.$name"
    ],
    "tags": []
  },
  {
    "desc": "Socket options for SSL clients.",
    "fields": [
      {
        "desc": "\nTrusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
        "name": "cacertfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "\nPEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.\n",
        "name": "certfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "PEM format private key file. ",
        "name": "keyfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "verify_none",
          "oneliner": true
        },
        "desc": "Enable or disable peer verification. ",
        "name": "verify",
        "raw_default": "verify_none",
        "type": {
          "kind": "enum",
          "symbols": [
            "verify_peer",
            "verify_none"
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable TLS session reuse. ",
        "name": "reuse_sessions",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "10",
          "oneliner": true
        },
        "desc": "\nMaximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.<br/>\n",
        "name": "depth",
        "raw_default": 10,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "desc": "\nString containing the user's password.\nOnly used if the private key file is password-protected.\n",
        "examples": [
          ""
        ],
        "name": "password",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
          "oneliner": true
        },
        "desc": "\nAll TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.\n",
        "name": "versions",
        "raw_default": [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "atom()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "\nThis config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n",
        "name": "ciphers",
        "raw_default": [],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "\"emqx_tls_psk:lookup\"",
          "oneliner": true
        },
        "desc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity. ",
        "name": "user_lookup_fun",
        "raw_default": "emqx_tls_psk:lookup",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.\n",
        "name": "secure_renegotiate",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable TLS. ",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nSpecify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.\n",
        "examples": [
          "disable"
        ],
        "name": "server_name_indication",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "disable"
            },
            {
              "kind": "primitive",
              "name": "string()"
            }
          ]
        }
      }
    ],
    "full_name": "broker:ssl_client_opts",
    "paths": [
      "authentication.$INDEX.ssl",
      "authorization.sources.$INDEX.ssl",
      "bridges.mqtt.$name.connector.ssl",
      "bridges.webhook.$name.ssl",
      "cluster.etcd.ssl",
      "connectors.mqtt.$name.ssl",
      "gateway.coap.authentication.ssl",
      "gateway.coap.listeners.dtls.$name.authentication.ssl",
      "gateway.coap.listeners.udp.$name.authentication.ssl",
      "gateway.exproto.authentication.ssl",
      "gateway.exproto.handler.ssl_options",
      "gateway.exproto.listeners.dtls.$name.authentication.ssl",
      "gateway.exproto.listeners.ssl.$name.authentication.ssl",
      "gateway.exproto.listeners.tcp.$name.authentication.ssl",
      "gateway.exproto.listeners.udp.$name.authentication.ssl",
      "gateway.lwm2m.authentication.ssl",
      "gateway.lwm2m.listeners.dtls.$name.authentication.ssl",
      "gateway.lwm2m.listeners.udp.$name.authentication.ssl",
      "gateway.mqttsn.authentication.ssl",
      "gateway.mqttsn.listeners.dtls.$name.authentication.ssl",
      "gateway.mqttsn.listeners.udp.$name.authentication.ssl",
      "gateway.stomp.authentication.ssl",
      "gateway.stomp.listeners.ssl.$name.authentication.ssl",
      "gateway.stomp.listeners.tcp.$name.authentication.ssl",
      "listeners.ssl.$name.authentication.$INDEX.ssl",
      "listeners.tcp.$name.authentication.$INDEX.ssl",
      "listeners.ws.$name.authentication.$INDEX.ssl",
      "listeners.wss.$name.authentication.$INDEX.ssl"
    ],
    "tags": []
  },
  {
    "desc": "Enable/disable statistic data collection.\nStatistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable/disable statistic data collection.",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "broker:stats",
    "paths": [
      "stats"
    ],
    "tags": []
  },
  {
    "desc": "The EMQX Broker periodically publishes its own status, message statistics,\nclient online and offline events to the system topic starting with `$SYS/`.\n\nThe following options control the behavior of `$SYS` topics.",
    "fields": [
      {
        "default": {
          "hocon": "\"1m\"",
          "oneliner": true
        },
        "desc": "Time interval of publishing `$SYS` messages.",
        "name": "sys_msg_interval",
        "raw_default": [
          49,
          109
        ],
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "disabled"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:duration()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"30s\"",
          "oneliner": true
        },
        "desc": "Time interval for publishing following heartbeat messages:\n  - `$SYS/brokers/<node>/uptime`\n  - `$SYS/brokers/<node>/datetime`\n",
        "name": "sys_heartbeat_interval",
        "raw_default": [
          51,
          48,
          115
        ],
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "disabled"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:duration()"
            }
          ]
        }
      },
      {
        "desc": "Client events messages.",
        "name": "sys_event_messages",
        "type": {
          "kind": "struct",
          "name": "broker:event_names"
        }
      }
    ],
    "full_name": "broker:sys_topics",
    "paths": [
      "sys_topics"
    ],
    "tags": []
  },
  {
    "desc": "Features related to system monitoring and introspection.",
    "fields": [
      {
        "name": "vm",
        "type": {
          "kind": "struct",
          "name": "broker:sysmon_vm"
        }
      },
      {
        "name": "os",
        "type": {
          "kind": "struct",
          "name": "broker:sysmon_os"
        }
      },
      {
        "name": "top",
        "type": {
          "kind": "struct",
          "name": "broker:sysmon_top"
        }
      }
    ],
    "full_name": "broker:sysmon",
    "paths": [
      "sysmon"
    ],
    "tags": []
  },
  {
    "desc": "This part of the configuration is responsible for monitoring\n the host OS health, such as free memory, disk space, CPU load, etc.",
    "fields": [
      {
        "default": {
          "hocon": "\"60s\"",
          "oneliner": true
        },
        "desc": "The time interval for the periodic CPU check.",
        "name": "cpu_check_interval",
        "raw_default": [
          54,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "\"80%\"",
          "oneliner": true
        },
        "desc": "The threshold, as percentage of system CPU load,\n for how much system cpu can be used before the corresponding alarm is raised.",
        "name": "cpu_high_watermark",
        "raw_default": [
          56,
          48,
          37
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:percent()"
        }
      },
      {
        "default": {
          "hocon": "\"60%\"",
          "oneliner": true
        },
        "desc": "The threshold, as percentage of system CPU load,\n for how much system cpu can be used before the corresponding alarm is cleared.",
        "name": "cpu_low_watermark",
        "raw_default": [
          54,
          48,
          37
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:percent()"
        }
      },
      {
        "default": {
          "hocon": "\"60s\"",
          "oneliner": true
        },
        "desc": "The time interval for the periodic memory check.",
        "name": "mem_check_interval",
        "raw_default": [
          54,
          48,
          115
        ],
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "disabled"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:duration()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"70%\"",
          "oneliner": true
        },
        "desc": "The threshold, as percentage of system memory,\n for how much system memory can be allocated before the corresponding alarm is raised.",
        "name": "sysmem_high_watermark",
        "raw_default": [
          55,
          48,
          37
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:percent()"
        }
      },
      {
        "default": {
          "hocon": "\"5%\"",
          "oneliner": true
        },
        "desc": "The threshold, as percentage of system memory,\n for how much system memory can be allocated by one Erlang process before\n the corresponding alarm is raised.",
        "name": "procmem_high_watermark",
        "raw_default": [
          53,
          37
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:percent()"
        }
      }
    ],
    "full_name": "broker:sysmon_os",
    "paths": [
      "sysmon.os"
    ],
    "tags": []
  },
  {
    "desc": "This part of the configuration is responsible for monitoring\n the Erlang processes in the VM. This information can be sent to an external\n PostgreSQL database. This feature is inactive unless the PostgreSQL sink is configured.",
    "fields": [
      {
        "default": {
          "hocon": "10",
          "oneliner": true
        },
        "desc": "The number of top processes per monitoring group",
        "mapping": "system_monitor.top_num_items",
        "name": "num_items",
        "raw_default": 10,
        "type": {
          "kind": "primitive",
          "name": "non_neg_integer()"
        }
      },
      {
        "default": {
          "hocon": "\"2s\"",
          "oneliner": true
        },
        "desc": "Specifies how often process top should be collected",
        "mapping": "system_monitor.top_sample_interval",
        "name": "sample_interval",
        "raw_default": [
          50,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "1000000",
          "oneliner": true
        },
        "desc": "Stop collecting data when the number of processes\nin the VM exceeds this value",
        "mapping": "system_monitor.top_max_procs",
        "name": "max_procs",
        "raw_default": 1000000,
        "type": {
          "kind": "primitive",
          "name": "non_neg_integer()"
        }
      },
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "Hostname of the PostgreSQL database that collects the data points",
        "mapping": "system_monitor.db_hostname",
        "name": "db_hostname",
        "raw_default": [],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "5432",
          "oneliner": true
        },
        "desc": "Port of the PostgreSQL database that collects the data points.",
        "mapping": "system_monitor.db_port",
        "name": "db_port",
        "raw_default": 5432,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "\"system_monitor\"",
          "oneliner": true
        },
        "desc": "Username of the PostgreSQL database",
        "mapping": "system_monitor.db_username",
        "name": "db_username",
        "raw_default": [
          115,
          121,
          115,
          116,
          101,
          109,
          95,
          109,
          111,
          110,
          105,
          116,
          111,
          114
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "\"system_monitor_password\"",
          "oneliner": true
        },
        "desc": "EMQX user password in the PostgreSQL database",
        "mapping": "system_monitor.db_password",
        "name": "db_password",
        "raw_default": [
          115,
          121,
          115,
          116,
          101,
          109,
          95,
          109,
          111,
          110,
          105,
          116,
          111,
          114,
          95,
          112,
          97,
          115,
          115,
          119,
          111,
          114,
          100
        ],
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "\"postgres\"",
          "oneliner": true
        },
        "desc": "PostgreSQL database name",
        "mapping": "system_monitor.db_name",
        "name": "db_name",
        "raw_default": [
          112,
          111,
          115,
          116,
          103,
          114,
          101,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      }
    ],
    "full_name": "broker:sysmon_top",
    "paths": [
      "sysmon.top"
    ],
    "tags": []
  },
  {
    "desc": "This part of the configuration is responsible for collecting\n BEAM VM events, such as long garbage collection, traffic congestion in the inter-broker\n communication, etc.",
    "fields": [
      {
        "default": {
          "hocon": "\"30s\"",
          "oneliner": true
        },
        "desc": "The time interval for the periodic process limit check.",
        "name": "process_check_interval",
        "raw_default": [
          51,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "\"80%\"",
          "oneliner": true
        },
        "desc": "The threshold, as percentage of processes, for how many\n processes can simultaneously exist at the local node before the corresponding\n alarm is raised.",
        "name": "process_high_watermark",
        "raw_default": [
          56,
          48,
          37
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:percent()"
        }
      },
      {
        "default": {
          "hocon": "\"60%\"",
          "oneliner": true
        },
        "desc": "The threshold, as percentage of processes, for how many\n processes can simultaneously exist at the local node before the corresponding\n alarm is cleared.",
        "name": "process_low_watermark",
        "raw_default": [
          54,
          48,
          37
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:percent()"
        }
      },
      {
        "default": {
          "hocon": "disabled",
          "oneliner": true
        },
        "desc": "Enable Long GC monitoring.",
        "name": "long_gc",
        "raw_default": "disabled",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "disabled"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:duration()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"240ms\"",
          "oneliner": true
        },
        "desc": "Enable Long Schedule monitoring.",
        "name": "long_schedule",
        "raw_default": [
          50,
          52,
          48,
          109,
          115
        ],
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "disabled"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:duration()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"32MB\"",
          "oneliner": true
        },
        "desc": "Enable Large Heap monitoring.",
        "name": "large_heap",
        "raw_default": [
          51,
          50,
          77,
          66
        ],
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "disabled"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:bytesize()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable Busy Distribution Port monitoring.",
        "name": "busy_dist_port",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable Busy Port monitoring.",
        "name": "busy_port",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "broker:sysmon_vm",
    "paths": [
      "sysmon.vm"
    ],
    "tags": []
  },
  {
    "desc": "TCP listener options.",
    "fields": [
      {
        "default": {
          "hocon": "100",
          "oneliner": true
        },
        "desc": "\nSpecify the {active, N} option for this Socket.<br/>\nSee: https://erlang.org/doc/man/inet.html#setopts-2\n",
        "name": "active_n",
        "raw_default": 100,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "1024",
          "oneliner": true
        },
        "desc": "\nTCP backlog defines the maximum length that the queue of\n pending connections can grow to.\n",
        "name": "backlog",
        "raw_default": 1024,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "The TCP send timeout for the connections. ",
        "name": "send_timeout",
        "raw_default": [
          49,
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nClose the connection if send timeout.\n",
        "name": "send_timeout_close",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nThe TCP receive buffer (OS kernel) for the connections.\n",
        "examples": [
          "2KB"
        ],
        "name": "recbuf",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "desc": "\nThe TCP send buffer (OS kernel) for the connections.\n",
        "examples": [
          "4KB"
        ],
        "name": "sndbuf",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "default": {
          "hocon": "\"4KB\"",
          "oneliner": true
        },
        "desc": "\nThe size of the user-space buffer used by the driver.\n",
        "examples": [
          "4KB"
        ],
        "name": "buffer",
        "raw_default": "4KB",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "default": {
          "hocon": "\"1MB\"",
          "oneliner": true
        },
        "desc": "\nThe socket is set to a busy state when the amount of data queued internally\n  by the VM socket implementation reaches this limit.\n",
        "name": "high_watermark",
        "raw_default": [
          49,
          77,
          66
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nThe TCP_NODELAY flag for the connections.\n",
        "name": "nodelay",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nThe SO_REUSEADDR flag for the connections.\n",
        "name": "reuseaddr",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "broker:tcp_opts",
    "paths": [
      "gateway.exproto.listeners.ssl.$name.tcp_options",
      "gateway.exproto.listeners.tcp.$name.tcp_options",
      "gateway.stomp.listeners.ssl.$name.tcp_options",
      "gateway.stomp.listeners.tcp.$name.tcp_options",
      "listeners.ssl.$name.tcp_options",
      "listeners.tcp.$name.tcp_options",
      "listeners.ws.$name.tcp_options",
      "listeners.wss.$name.tcp_options"
    ],
    "tags": []
  },
  {
    "desc": "Real-time filtering logs for the ClientID or Topic or IP for debugging.",
    "fields": [
      {
        "default": {
          "hocon": "text",
          "oneliner": true
        },
        "desc": "\nDetermine the format of the payload format in the trace file.<br/>\n`text`: Text-based protocol or plain text protocol.\n It is recommended when payload is JSON encoded.<br/>\n`hex`: Binary hexadecimal encode. It is recommended when payload is a custom binary protocol.<br/>\n`hidden`: payload is obfuscated as `******`\n\n",
        "name": "payload_encode",
        "raw_default": "text",
        "type": {
          "kind": "enum",
          "symbols": [
            "hex",
            "text",
            "hidden"
          ]
        }
      }
    ],
    "full_name": "broker:trace",
    "paths": [
      "trace"
    ],
    "tags": []
  },
  {
    "desc": "WebSocket listener options.",
    "fields": [
      {
        "default": {
          "hocon": "\"/mqtt\"",
          "oneliner": true
        },
        "desc": "\nWebSocket's MQTT protocol path. So the address of EMQX Broker's WebSocket is:\n<code>ws://{ip}:{port}/mqtt</code>\n",
        "name": "mqtt_path",
        "raw_default": [
          47,
          109,
          113,
          116,
          116
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "multiple",
          "oneliner": true
        },
        "desc": "\nWhether a WebSocket message is allowed to contain multiple MQTT packets.\n",
        "name": "mqtt_piggyback",
        "raw_default": "multiple",
        "type": {
          "kind": "enum",
          "symbols": [
            "single",
            "multiple"
          ]
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nIf <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/>\nThe configuration items under <code>deflate_opts</code> belong to the compression-related parameter configuration.\n",
        "name": "compress",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"7200s\"",
          "oneliner": true
        },
        "desc": "\nClose transport-layer connections from the clients that have not sent MQTT CONNECT\nmessage within this interval.\n",
        "name": "idle_timeout",
        "raw_default": [
          55,
          50,
          48,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "infinity",
          "oneliner": true
        },
        "desc": "\nThe maximum length of a single MQTT packet.\n",
        "name": "max_frame_size",
        "raw_default": "infinity",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "infinity"
            },
            {
              "kind": "primitive",
              "name": "integer()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nIf <code>true</code>, the server will return an error when\n the client does not carry the <code>Sec-WebSocket-Protocol</code> field.\n <br/>Note: WeChat applet needs to disable this verification.\n",
        "name": "fail_if_no_subprotocol",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5\"",
          "oneliner": true
        },
        "desc": "\nComma-separated list of supported subprotocols.\n",
        "name": "supported_subprotocols",
        "raw_default": [
          109,
          113,
          116,
          116,
          44,
          32,
          109,
          113,
          116,
          116,
          45,
          118,
          51,
          44,
          32,
          109,
          113,
          116,
          116,
          45,
          118,
          51,
          46,
          49,
          46,
          49,
          44,
          32,
          109,
          113,
          116,
          116,
          45,
          118,
          53
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:comma_separated_list()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nIf <code>true</code>, <code>origin</code> HTTP header will be\n validated against the list of allowed origins configured in <code>check_origins</code>\n parameter.\n",
        "name": "check_origin_enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nIf <code>false</code> and <code>check_origin_enable</code> is\n <code>true</code>, the server will reject requests that don't have <code>origin</code>\n HTTP header.\n",
        "name": "allow_origin_absence",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"http://localhost:18083, http://127.0.0.1:18083\"",
          "oneliner": true
        },
        "desc": "\nList of allowed origins.<br/>See <code>check_origin_enable</code>.\n",
        "name": "check_origins",
        "raw_default": "http://localhost:18083, http://127.0.0.1:18083",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:comma_separated_binary()"
        }
      },
      {
        "default": {
          "hocon": "\"x-forwarded-for\"",
          "oneliner": true
        },
        "desc": "\nHTTP header used to pass information about the client IP address.\nRelevant when the EMQX cluster is deployed behind a load-balancer.\n",
        "name": "proxy_address_header",
        "raw_default": [
          120,
          45,
          102,
          111,
          114,
          119,
          97,
          114,
          100,
          101,
          100,
          45,
          102,
          111,
          114
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "\"x-forwarded-port\"",
          "oneliner": true
        },
        "desc": "\nHTTP header used to pass information about the client port.\nRelevant when the EMQX cluster is deployed behind a load-balancer.\n",
        "name": "proxy_port_header",
        "raw_default": [
          120,
          45,
          102,
          111,
          114,
          119,
          97,
          114,
          100,
          101,
          100,
          45,
          112,
          111,
          114,
          116
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "name": "deflate_opts",
        "type": {
          "kind": "struct",
          "name": "broker:deflate_opts"
        }
      }
    ],
    "full_name": "broker:ws_opts",
    "paths": [
      "listeners.ws.$name.websocket",
      "listeners.wss.$name.websocket"
    ],
    "tags": []
  },
  {
    "desc": "A `Zone` defines a set of configuration items (such as the maximum number of connections) that can be shared between multiple listeners.\n\n`Listener` can refer to a `Zone` through the configuration item <code>listener.\\<Protocol>.\\<Listener Name>.zone</code>.\n\nThe configs defined in the zones will override the global configs with the same key.\n\nFor example, given the following config:\n```\na {\n    b: 1, c: 1\n}\nzone.my_zone {\n  a {\n    b:2\n  }\n}\n```\n\nThe global config `a` is overridden by the configs `a` inside the zone `my_zone`.\n\nIf there is a listener using the zone `my_zone`, the value of config `a` will be: `{b:2, c: 1}`.\nNote that although the default value of `a.c` is `0`, the global value is used, i.e. configs in the zone have no default values. To override `a.c` one must configure it explicitly in the zone.\n\nAll the global configs that can be overridden in zones are:\n - `stats.*`\n - `mqtt.*`\n - `authorization.*`\n - `flapping_detect.*`\n - `force_shutdown.*`\n - `conn_congestion.*`\n - `force_gc.*`\n\n",
    "fields": [
      {
        "name": "mqtt",
        "type": {
          "kind": "struct",
          "name": "zone:mqtt"
        }
      },
      {
        "name": "stats",
        "type": {
          "kind": "struct",
          "name": "zone:stats"
        }
      },
      {
        "name": "flapping_detect",
        "type": {
          "kind": "struct",
          "name": "zone:flapping_detect"
        }
      },
      {
        "name": "force_shutdown",
        "type": {
          "kind": "struct",
          "name": "zone:force_shutdown"
        }
      },
      {
        "name": "conn_congestion",
        "type": {
          "kind": "struct",
          "name": "zone:conn_congestion"
        }
      },
      {
        "name": "force_gc",
        "type": {
          "kind": "struct",
          "name": "zone:force_gc"
        }
      },
      {
        "name": "overload_protection",
        "type": {
          "kind": "struct",
          "name": "zone:overload_protection"
        }
      }
    ],
    "full_name": "broker:zone",
    "paths": [
      "zones.$name"
    ],
    "tags": []
  },
  {
    "desc": "\nConfiguration for EMQX connectors.<br/>\nA connector maintains the data related to the external resources, such as MySQL database.\n",
    "fields": [
      {
        "desc": "MQTT bridges.",
        "name": "mqtt",
        "type": {
          "kind": "map",
          "name": "name",
          "values": {
            "kind": "struct",
            "name": "connector-mqtt:connector"
          }
        }
      }
    ],
    "full_name": "connector:connectors",
    "paths": [
      "connectors"
    ],
    "tags": []
  },
  {
    "desc": "Configuration for EMQX dashboard.",
    "fields": [
      {
        "desc": "HTTP(s) listeners are identified by their protocol type and are\nused to serve dashboard UI and restful HTTP API.\nListeners must have a unique combination of port number and IP address.\nFor example, an HTTP listener can listen on all configured IP addresses\non a given port for a machine by specifying the IP address 0.0.0.0.\nAlternatively, the HTTP listener can specify a unique IP address for each listener,\nbut use the same port.",
        "name": "listeners",
        "type": {
          "kind": "struct",
          "name": "dashboard:listeners"
        }
      },
      {
        "default": {
          "hocon": "\"admin\"",
          "oneliner": true
        },
        "desc": "The default username of the automatically created dashboard user.",
        "name": "default_username",
        "raw_default": [
          97,
          100,
          109,
          105,
          110
        ],
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "\"public\"",
          "oneliner": true
        },
        "desc": "The initial default password for dashboard 'admin' user.\nFor safety, it should be changed as soon as possible.",
        "name": "default_password",
        "raw_default": [
          112,
          117,
          98,
          108,
          105,
          99
        ],
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "\"10s\"",
          "oneliner": true
        },
        "desc": "How often to update metrics displayed in the dashboard.\nNote: `sample_interval` should be a divisor of 60.",
        "name": "sample_interval",
        "raw_default": [
          49,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_s()"
        }
      },
      {
        "default": {
          "hocon": "\"60m\"",
          "oneliner": true
        },
        "desc": "JWT token expiration time.",
        "name": "token_expired_time",
        "raw_default": [
          54,
          48,
          109
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Support Cross-Origin Resource Sharing (CORS).\nAllows a server to indicate any origins (domain, scheme, or port) other than\nits own from which a browser should permit loading resources.",
        "name": "cors",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "en",
          "oneliner": true
        },
        "desc": "Internationalization language support.",
        "name": "i18n_lang",
        "raw_default": "en",
        "type": {
          "kind": "enum",
          "symbols": [
            "en",
            "zh"
          ]
        }
      },
      {
        "desc": "Initialize users file.",
        "name": "bootstrap_users_file",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      }
    ],
    "full_name": "dashboard",
    "paths": [
      "dashboard"
    ],
    "tags": []
  },
  {
    "desc": "Configuration for the dashboard listener (plaintext).",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Ignore or enable this listener",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "18083",
          "oneliner": true
        },
        "desc": "Port without IP(18083) or port with specified IP(127.0.0.1:18083).",
        "examples": [
          [
            48,
            46,
            48,
            46,
            48,
            46,
            48,
            58,
            49,
            56,
            48,
            56,
            51
          ]
        ],
        "name": "bind",
        "raw_default": 18083,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "non_neg_integer()"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:ip_port()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "4",
          "oneliner": true
        },
        "desc": "Socket acceptor pool size for TCP protocols.",
        "name": "num_acceptors",
        "raw_default": 4,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "512",
          "oneliner": true
        },
        "desc": "Maximum number of simultaneous connections.",
        "name": "max_connections",
        "raw_default": 512,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "1024",
          "oneliner": true
        },
        "desc": "Defines the maximum length that the queue of pending connections can grow to.",
        "name": "backlog",
        "raw_default": 1024,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "\"5s\"",
          "oneliner": true
        },
        "desc": "Send timeout for the socket.",
        "name": "send_timeout",
        "raw_default": [
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable IPv6 support, default is false, which means IPv4 only.",
        "name": "inet6",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Disable IPv4-to-IPv6 mapping for the listener.",
        "name": "ipv6_v6only",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "dashboard:http",
    "paths": [
      "dashboard.listeners.http"
    ],
    "tags": []
  },
  {
    "desc": "Configuration for the dashboard listener (TLS).",
    "fields": [
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Ignore or enable this listener",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "18084",
          "oneliner": true
        },
        "desc": "Port without IP(18083) or port with specified IP(127.0.0.1:18083).",
        "examples": [
          [
            48,
            46,
            48,
            46,
            48,
            46,
            48,
            58,
            49,
            56,
            48,
            56,
            52
          ]
        ],
        "name": "bind",
        "raw_default": 18084,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "non_neg_integer()"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:ip_port()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "4",
          "oneliner": true
        },
        "desc": "Socket acceptor pool size for TCP protocols.",
        "name": "num_acceptors",
        "raw_default": 4,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "512",
          "oneliner": true
        },
        "desc": "Maximum number of simultaneous connections.",
        "name": "max_connections",
        "raw_default": 512,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "1024",
          "oneliner": true
        },
        "desc": "Defines the maximum length that the queue of pending connections can grow to.",
        "name": "backlog",
        "raw_default": 1024,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "default": {
          "hocon": "\"5s\"",
          "oneliner": true
        },
        "desc": "Send timeout for the socket.",
        "name": "send_timeout",
        "raw_default": [
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable IPv6 support, default is false, which means IPv4 only.",
        "name": "inet6",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Disable IPv4-to-IPv6 mapping for the listener.",
        "name": "ipv6_v6only",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nTrusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
        "name": "cacertfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "\nPEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.\n",
        "name": "certfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "PEM format private key file. ",
        "name": "keyfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "verify_none",
          "oneliner": true
        },
        "desc": "Enable or disable peer verification. ",
        "name": "verify",
        "raw_default": "verify_none",
        "type": {
          "kind": "enum",
          "symbols": [
            "verify_peer",
            "verify_none"
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable TLS session reuse. ",
        "name": "reuse_sessions",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "10",
          "oneliner": true
        },
        "desc": "\nMaximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.<br/>\n",
        "name": "depth",
        "raw_default": 10,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "desc": "\nString containing the user's password.\nOnly used if the private key file is password-protected.\n",
        "examples": [
          ""
        ],
        "name": "password",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
          "oneliner": true
        },
        "desc": "\nAll TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.\n",
        "name": "versions",
        "raw_default": [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "atom()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "\nThis config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n",
        "name": "ciphers",
        "raw_default": [],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "\"emqx_tls_psk:lookup\"",
          "oneliner": true
        },
        "desc": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity. ",
        "name": "user_lookup_fun",
        "raw_default": "emqx_tls_psk:lookup",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.\n",
        "name": "secure_renegotiate",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nPath to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br/>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.\n",
        "name": "dhfile",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nAn important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.\n",
        "name": "honor_cipher_order",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nIn protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.\n",
        "name": "client_renegotiation",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "\nMaximum time duration allowed for the handshake to complete\n",
        "name": "handshake_timeout",
        "raw_default": [
          49,
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "dashboard:https",
    "paths": [
      "dashboard.listeners.https"
    ],
    "tags": []
  },
  {
    "desc": "Configuration for the dashboard listener.",
    "fields": [
      {
        "desc": "TCP listeners",
        "name": "http",
        "type": {
          "kind": "struct",
          "name": "dashboard:http"
        }
      },
      {
        "desc": "SSL listeners",
        "name": "https",
        "type": {
          "kind": "struct",
          "name": "dashboard:https"
        }
      }
    ],
    "full_name": "dashboard:listeners",
    "paths": [
      "dashboard.listeners"
    ],
    "tags": []
  },
  {
    "desc": "External hook (exhook) configuration.",
    "fields": [
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "List of exhook servers",
        "name": "servers",
        "raw_default": [],
        "type": {
          "elements": {
            "kind": "struct",
            "name": "exhook:server"
          },
          "kind": "array"
        }
      }
    ],
    "full_name": "exhook",
    "paths": [
      "exhook"
    ],
    "tags": []
  },
  {
    "desc": "gRPC server configuration.",
    "fields": [
      {
        "desc": "Name of the exhook server",
        "examples": [
          "default"
        ],
        "name": "name",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable this Exhook server",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "URL of the gRPC server",
        "examples": [
          "http://127.0.0.1:9000"
        ],
        "name": "url",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "\"5s\"",
          "oneliner": true
        },
        "desc": "The timeout of request gRPC server",
        "name": "request_timeout",
        "raw_default": [
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "deny",
          "oneliner": true
        },
        "desc": "The value that is returned when the request to the gRPC server fails for any reason",
        "name": "failed_action",
        "raw_default": "deny",
        "type": {
          "kind": "enum",
          "symbols": [
            "deny",
            "ignore"
          ]
        }
      },
      {
        "name": "ssl",
        "type": {
          "kind": "struct",
          "name": "exhook:ssl_conf"
        }
      },
      {
        "default": {
          "hocon": "{keepalive = true, nodelay = true}",
          "oneliner": true
        },
        "name": "socket_options",
        "raw_default": {
          "keepalive": true,
          "nodelay": true
        },
        "type": {
          "kind": "struct",
          "name": "exhook:socket_options"
        }
      },
      {
        "default": {
          "hocon": "\"60s\"",
          "oneliner": true
        },
        "desc": "Whether to automatically reconnect (initialize) the gRPC server.\nWhen gRPC is not available, Exhook tries to request the gRPC service at that interval and reinitialize the list of mounted hooks.",
        "name": "auto_reconnect",
        "raw_default": [
          54,
          48,
          115
        ],
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "false"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:duration()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "8",
          "oneliner": true
        },
        "desc": "The process pool size for gRPC client",
        "name": "pool_size",
        "raw_default": 8,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      }
    ],
    "full_name": "exhook:server",
    "paths": [
      "exhook.servers.$INDEX"
    ],
    "tags": []
  },
  {
    "desc": "Connection socket options",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enables/disables periodic transmission on a connected socket when no other data is exchanged.\nIf the other end does not respond, the connection is considered broken and an error message is sent to the controlling process.",
        "name": "keepalive",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "If true, option TCP_NODELAY is turned on for the socket,\nwhich means that also small amounts of data are sent immediately",
        "name": "nodelay",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "The minimum size of receive buffer to use for the socket",
        "examples": [
          "64KB"
        ],
        "name": "recbuf",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "desc": "The minimum size of send buffer to use for the socket",
        "examples": [
          "16KB"
        ],
        "name": "sndbuf",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      }
    ],
    "full_name": "exhook:socket_options",
    "paths": [
      "exhook.servers.$INDEX.socket_options"
    ],
    "tags": []
  },
  {
    "desc": "SSL client configuration.",
    "fields": [
      {
        "desc": "\nTrusted PEM format CA certificates bundle file.<br/>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br/>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
        "name": "cacertfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "\nPEM format certificates chain file.<br/>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.\n",
        "name": "certfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "PEM format private key file. ",
        "name": "keyfile",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "verify_none",
          "oneliner": true
        },
        "desc": "Enable or disable peer verification. ",
        "name": "verify",
        "raw_default": "verify_none",
        "type": {
          "kind": "enum",
          "symbols": [
            "verify_peer",
            "verify_none"
          ]
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable TLS session reuse. ",
        "name": "reuse_sessions",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "10",
          "oneliner": true
        },
        "desc": "\nMaximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path.\nSo, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly;<br/>\nif 1 the path can be PEER, Intermediate-CA, ROOT-CA;<br/>\nif 2 the path can be PEER, Intermediate-CA1, Intermediate-CA2, ROOT-CA.<br/>\n",
        "name": "depth",
        "raw_default": 10,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "desc": "\nString containing the user's password.\nOnly used if the private key file is password-protected.\n",
        "examples": [
          ""
        ],
        "name": "password",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "[tlsv1.3, tlsv1.2, tlsv1.1, tlsv1]",
          "oneliner": true
        },
        "desc": "\nAll TLS/DTLS versions to be supported.<br/>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config.<br/>\nIn case PSK cipher suites are intended, make sure to configure\n<code>['tlsv1.2', 'tlsv1.1']</code> here.\n",
        "name": "versions",
        "raw_default": [
          "tlsv1.3",
          "tlsv1.2",
          "tlsv1.1",
          "tlsv1"
        ],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "atom()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "\nThis config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br/>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br/>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br/>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br/>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br/>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br/>\n",
        "name": "ciphers",
        "raw_default": [],
        "type": {
          "elements": {
            "kind": "primitive",
            "name": "string()"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "\nSSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.\n",
        "name": "secure_renegotiate",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable TLS. ",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nSpecify the host name to be used in TLS Server Name Indication extension.<br/>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br/>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br/>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br/> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.\n",
        "examples": [
          "disable"
        ],
        "name": "server_name_indication",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "disable"
            },
            {
              "kind": "primitive",
              "name": "string()"
            }
          ]
        }
      }
    ],
    "full_name": "exhook:ssl_conf",
    "paths": [
      "exhook.servers.$INDEX.ssl"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the bucket.",
    "fields": [
      {
        "default": {
          "hocon": "\"infinity\"",
          "oneliner": true
        },
        "desc": "Rate for this bucket.",
        "name": "rate",
        "raw_default": [
          105,
          110,
          102,
          105,
          110,
          105,
          116,
          121
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:rate()"
        }
      },
      {
        "default": {
          "hocon": "\"infinity\"",
          "oneliner": true
        },
        "desc": "The capacity of this token bucket.",
        "name": "capacity",
        "raw_default": [
          105,
          110,
          102,
          105,
          110,
          105,
          116,
          121
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:capacity()"
        }
      },
      {
        "default": {
          "hocon": "\"0\"",
          "oneliner": true
        },
        "desc": "The initial number of tokens for this bucket.",
        "name": "initial",
        "raw_default": [
          48
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:initial()"
        }
      }
    ],
    "full_name": "limiter:bucket_opts",
    "paths": [
      "listeners.quic.$name.limiter.bytes_in",
      "listeners.quic.$name.limiter.connection",
      "listeners.quic.$name.limiter.message_in",
      "listeners.quic.$name.limiter.message_routing",
      "listeners.ssl.$name.limiter.bytes_in",
      "listeners.ssl.$name.limiter.connection",
      "listeners.ssl.$name.limiter.message_in",
      "listeners.ssl.$name.limiter.message_routing",
      "listeners.tcp.$name.limiter.bytes_in",
      "listeners.tcp.$name.limiter.connection",
      "listeners.tcp.$name.limiter.message_in",
      "listeners.tcp.$name.limiter.message_routing",
      "listeners.ws.$name.limiter.bytes_in",
      "listeners.ws.$name.limiter.connection",
      "listeners.ws.$name.limiter.message_in",
      "listeners.ws.$name.limiter.message_routing",
      "listeners.wss.$name.limiter.bytes_in",
      "listeners.wss.$name.limiter.connection",
      "listeners.wss.$name.limiter.message_in",
      "listeners.wss.$name.limiter.message_routing"
    ],
    "tags": []
  },
  {
    "desc": "Fields of the client level.",
    "fields": [
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
        "name": "bytes_in",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
        "name": "message_in",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
        "name": "connection",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
        "name": "message_routing",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "Limiter for EMQX internal app.",
        "name": "internal",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      }
    ],
    "full_name": "limiter:client_fields",
    "paths": [
      "limiter.client"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the client in bucket level.",
    "fields": [
      {
        "default": {
          "hocon": "\"infinity\"",
          "oneliner": true
        },
        "desc": "Rate for this bucket.",
        "name": "rate",
        "raw_default": [
          105,
          110,
          102,
          105,
          110,
          105,
          116,
          121
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:rate()"
        }
      },
      {
        "default": {
          "hocon": "\"0\"",
          "oneliner": true
        },
        "desc": "The initial number of tokens for this bucket.",
        "name": "initial",
        "raw_default": [
          48
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:initial()"
        }
      },
      {
        "default": {
          "hocon": "\"0\"",
          "oneliner": true
        },
        "desc": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
        "name": "low_watermark",
        "raw_default": [
          48
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:initial()"
        }
      },
      {
        "default": {
          "hocon": "\"infinity\"",
          "oneliner": true
        },
        "desc": "The capacity of per user.",
        "name": "capacity",
        "raw_default": [
          105,
          110,
          102,
          105,
          110,
          105,
          116,
          121
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:capacity()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Is it possible to split the number of requested tokens?",
        "name": "divisible",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"10s\"",
          "oneliner": true
        },
        "desc": "The maximum retry time when acquire failed.",
        "name": "max_retry_time",
        "raw_default": [
          49,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "force",
          "oneliner": true
        },
        "desc": "The strategy when all the retries failed.",
        "name": "failure_strategy",
        "raw_default": "force",
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:failure_strategy()"
        }
      }
    ],
    "full_name": "limiter:client_opts",
    "paths": [
      "limiter.client.bytes_in",
      "limiter.client.connection",
      "limiter.client.internal",
      "limiter.client.message_in",
      "limiter.client.message_routing",
      "listeners.quic.$name.limiter.client.bytes_in",
      "listeners.quic.$name.limiter.client.connection",
      "listeners.quic.$name.limiter.client.message_in",
      "listeners.quic.$name.limiter.client.message_routing",
      "listeners.ssl.$name.limiter.client.bytes_in",
      "listeners.ssl.$name.limiter.client.connection",
      "listeners.ssl.$name.limiter.client.message_in",
      "listeners.ssl.$name.limiter.client.message_routing",
      "listeners.tcp.$name.limiter.client.bytes_in",
      "listeners.tcp.$name.limiter.client.connection",
      "listeners.tcp.$name.limiter.client.message_in",
      "listeners.tcp.$name.limiter.client.message_routing",
      "listeners.ws.$name.limiter.client.bytes_in",
      "listeners.ws.$name.limiter.client.connection",
      "listeners.ws.$name.limiter.client.message_in",
      "listeners.ws.$name.limiter.client.message_routing",
      "listeners.wss.$name.limiter.client.bytes_in",
      "listeners.wss.$name.limiter.client.connection",
      "listeners.wss.$name.limiter.client.message_in",
      "listeners.wss.$name.limiter.client.message_routing",
      "retainer.flow_control.batch_deliver_limiter.client"
    ],
    "tags": []
  },
  {
    "desc": "Internal limiter.",
    "fields": [
      {
        "default": {
          "hocon": "\"infinity\"",
          "oneliner": true
        },
        "desc": "Rate for this bucket.",
        "name": "rate",
        "raw_default": [
          105,
          110,
          102,
          105,
          110,
          105,
          116,
          121
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:rate()"
        }
      },
      {
        "default": {
          "hocon": "\"infinity\"",
          "oneliner": true
        },
        "desc": "The capacity of this token bucket.",
        "name": "capacity",
        "raw_default": [
          105,
          110,
          102,
          105,
          110,
          105,
          116,
          121
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:capacity()"
        }
      },
      {
        "default": {
          "hocon": "\"0\"",
          "oneliner": true
        },
        "desc": "The initial number of tokens for this bucket.",
        "name": "initial",
        "raw_default": [
          48
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:initial()"
        }
      },
      {
        "desc": "The rate limit for each user of the bucket",
        "name": "client",
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      }
    ],
    "full_name": "limiter:internal",
    "paths": [
      "retainer.flow_control.batch_deliver_limiter"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the rate limiter.",
    "fields": [
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
        "name": "bytes_in",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:node_opts"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
        "name": "message_in",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:node_opts"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
        "name": "connection",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:node_opts"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
        "name": "message_routing",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:node_opts"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "Limiter for EMQX internal app.",
        "name": "internal",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "limiter:node_opts"
        }
      },
      {
        "default": {
          "hocon": "{\n  bytes_in {}\n  connection {}\n  internal {}\n  message_in {}\n  message_routing {}\n}\n",
          "oneliner": false
        },
        "desc": "The rate limit for each user of the bucket",
        "name": "client",
        "raw_default": {
          "bytes_in": {},
          "connection": {},
          "internal": {},
          "message_in": {},
          "message_routing": {}
        },
        "type": {
          "kind": "struct",
          "name": "limiter:client_fields"
        }
      }
    ],
    "full_name": "limiter",
    "paths": [
      "limiter"
    ],
    "tags": []
  },
  {
    "desc": "Fields of the client level of the listener.",
    "fields": [
      {
        "desc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
        "name": "bytes_in",
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      },
      {
        "desc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
        "name": "message_in",
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      },
      {
        "desc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
        "name": "connection",
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      },
      {
        "desc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
        "name": "message_routing",
        "type": {
          "kind": "struct",
          "name": "limiter:client_opts"
        }
      }
    ],
    "full_name": "limiter:listener_client_fields",
    "paths": [
      "listeners.quic.$name.limiter.client",
      "listeners.ssl.$name.limiter.client",
      "listeners.tcp.$name.limiter.client",
      "listeners.ws.$name.limiter.client",
      "listeners.wss.$name.limiter.client"
    ],
    "tags": []
  },
  {
    "desc": "Fields of the listener.",
    "fields": [
      {
        "desc": "The bytes_in limiter.\nThis is used to limit the inbound bytes rate for this EMQX node.\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
        "name": "bytes_in",
        "type": {
          "kind": "struct",
          "name": "limiter:bucket_opts"
        }
      },
      {
        "desc": "The message in limiter.\nThis is used to limit the inbound message numbers for this EMQX node\nOnce the limit is reached, the restricted client will be slow down even be hung for a while.",
        "name": "message_in",
        "type": {
          "kind": "struct",
          "name": "limiter:bucket_opts"
        }
      },
      {
        "desc": "The connection limiter.\nThis is used to limit the connection rate for this EMQX node.\nOnce the limit is reached, new connections will be refused",
        "name": "connection",
        "type": {
          "kind": "struct",
          "name": "limiter:bucket_opts"
        }
      },
      {
        "desc": "The message routing limiter.\nThis is used to limit the forwarding rate for this EMQX node.\nOnce the limit is reached, new publish will be refused",
        "name": "message_routing",
        "type": {
          "kind": "struct",
          "name": "limiter:bucket_opts"
        }
      },
      {
        "desc": "The rate limit for each user of the bucket",
        "name": "client",
        "type": {
          "kind": "struct",
          "name": "limiter:listener_client_fields"
        }
      }
    ],
    "full_name": "limiter:listener_fields",
    "paths": [
      "listeners.quic.$name.limiter",
      "listeners.ssl.$name.limiter",
      "listeners.tcp.$name.limiter",
      "listeners.ws.$name.limiter",
      "listeners.wss.$name.limiter"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the limiter of the node level.",
    "fields": [
      {
        "default": {
          "hocon": "\"infinity\"",
          "oneliner": true
        },
        "desc": "Rate for this bucket.",
        "name": "rate",
        "raw_default": [
          105,
          110,
          102,
          105,
          110,
          105,
          116,
          121
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:rate()"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
        "name": "burst",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "emqx_limiter_schema:burst_rate()"
        }
      }
    ],
    "full_name": "limiter:node_opts",
    "paths": [
      "limiter.bytes_in",
      "limiter.connection",
      "limiter.internal",
      "limiter.message_in",
      "limiter.message_routing"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the delayed module.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable this feature",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "Maximum number of delayed messages (0 is no limit).",
        "name": "max_delayed_messages",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      }
    ],
    "full_name": "modules:delayed",
    "paths": [
      "delayed"
    ],
    "tags": []
  },
  {
    "desc": "The topic rewriting function of EMQX supports rewriting topic A to topic B when the client subscribes to topics, publishes messages, and cancels subscriptions according to user-configured rules.\nEach rewrite rule consists of three parts: subject filter, regular expression, and target expression.\nUnder the premise that the subject rewriting function is enabled, when EMQX receives a subject-based MQTT message such as a `PUBLISH` message,\nit will use the subject of the message to sequentially match the subject filter part of the rule in the configuration file. If the match is successful,\nthe regular expression is used to extract the information in the subject, and then replaced with the target expression to form a new subject.\nVariables in the format of `$N` can be used in the target expression to match the elements extracted from the regular expression.\nThe value of `$N` is the Nth element extracted from the regular expression. For example, `$1` is the regular expression. The first element extracted by the expression.\nIt should be noted that EMQX uses reverse order to read the rewrite rules in the configuration file.\nWhen a topic can match the topic filter of multiple topic rewrite rules at the same time, EMQX will only use the first rule it matches. Rewrite.\nIf the regular expression in this rule does not match the subject of the MQTT message, the rewriting will fail, and no other rules will be attempted for rewriting.\nTherefore, users need to carefully design MQTT message topics and topic rewriting rules when using them.",
    "fields": [
      {
        "desc": "Topic rewriting takes effect on the type of operation:\n  - `subscribe`: Rewrite topic when client do subscribe.\n  - `publish`: Rewrite topic when client do publish.\n  - `all`: Both",
        "examples": [
          "publish"
        ],
        "name": "action",
        "type": {
          "kind": "enum",
          "symbols": [
            "subscribe",
            "publish",
            "all"
          ]
        }
      },
      {
        "desc": "Source topic, specified by the client.",
        "examples": [
          [
            120,
            47,
            35
          ]
        ],
        "name": "source_topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "Destination topic.",
        "examples": [
          [
            122,
            47,
            121,
            47,
            36,
            49
          ]
        ],
        "name": "dest_topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "Regular expressions",
        "examples": [
          [
            94,
            120,
            47,
            121,
            47,
            40,
            46,
            43,
            41,
            36
          ]
        ],
        "name": "re",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      }
    ],
    "full_name": "modules:rewrite",
    "paths": [
      "rewrite.$INDEX"
    ],
    "tags": []
  },
  {
    "desc": "Settings for the telemetry module.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable telemetry.",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "modules:telemetry",
    "paths": [
      "telemetry"
    ],
    "tags": []
  },
  {
    "desc": "",
    "fields": [
      {
        "desc": "Collect metrics for the topic.",
        "name": "topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      }
    ],
    "full_name": "modules:topic_metrics",
    "paths": [
      "topic_metrics.$INDEX"
    ],
    "tags": []
  },
  {
    "desc": "Configuration for MQTT bridge.",
    "fields": [
      {
        "default": {
          "hocon": "egress",
          "oneliner": true
        },
        "desc": "The direction of the bridge. Can be one of 'ingress' or 'egress'.<br/>\nThe egress config defines how this bridge forwards messages from the local broker to the remote\nbroker.<br/>Template with variables is allowed in 'remote_topic', 'qos', 'retain', 'payload'.<br/>NOTE: if this bridge is used as the action of a rule (emqx rule engine), and also local_topic\nis configured, then both the data got from the rule and the MQTT messages that matches\nlocal_topic will be forwarded.\n",
        "name": "direction",
        "raw_default": "egress",
        "type": {
          "kind": "singleton",
          "name": "egress"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable or disable this bridge",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nThe ID or the configs of the connector to be used for this bridge. Connector IDs must be of format:\n<code>{type}:{name}</code>.<br/>\nIn config files, you can find the corresponding config entry for a connector by such path:\n'connectors.{type}.{name}'.<br/>\n",
        "examples": [
          "mqtt:my_mqtt_connector"
        ],
        "name": "connector",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "binary()"
            },
            {
              "kind": "struct",
              "name": "connector-mqtt:connector"
            }
          ]
        }
      },
      {
        "desc": "The local topic to be forwarded to the remote broker",
        "name": "local_topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "\nForward to which topic of the remote broker.<br/>\nTemplate with variables is allowed.\n",
        "name": "remote_topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "\nThe QoS of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.\n",
        "name": "remote_qos",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "qos()"
            },
            {
              "kind": "primitive",
              "name": "binary()"
            }
          ]
        }
      },
      {
        "desc": "\nThe 'retain' flag of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.\n",
        "name": "retain",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "boolean()"
            },
            {
              "kind": "primitive",
              "name": "binary()"
            }
          ]
        }
      },
      {
        "desc": "\nThe payload of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.\n",
        "name": "payload",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      }
    ],
    "full_name": "egress",
    "paths": [
      "bridges.mqtt.$name"
    ],
    "tags": []
  },
  {
    "desc": "Configuration for MQTT bridge.",
    "fields": [
      {
        "default": {
          "hocon": "egress",
          "oneliner": true
        },
        "desc": "The direction of the bridge. Can be one of 'ingress' or 'egress'.<br/>\nThe ingress config defines how this bridge receive messages from the remote MQTT broker, and then\nsend them to the local broker.<br/>Template with variables is allowed in 'local_topic', 'remote_qos', 'qos', 'retain',\n'payload'.<br/>NOTE: if this bridge is used as the input of a rule (emqx rule engine), and also local_topic is\nconfigured, then messages got from the remote broker will be sent to both the 'local_topic' and\nthe rule.\n",
        "name": "direction",
        "raw_default": "egress",
        "type": {
          "kind": "singleton",
          "name": "ingress"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable or disable this bridge",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "\nThe ID or the configs of the connector to be used for this bridge. Connector IDs must be of format:\n<code>{type}:{name}</code>.<br/>\nIn config files, you can find the corresponding config entry for a connector by such path:\n'connectors.{type}.{name}'.<br/>\n",
        "examples": [
          "mqtt:my_mqtt_connector"
        ],
        "name": "connector",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "binary()"
            },
            {
              "kind": "struct",
              "name": "connector-mqtt:connector"
            }
          ]
        }
      },
      {
        "desc": "Receive messages from which topic of the remote broker",
        "name": "remote_topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "1",
          "oneliner": true
        },
        "desc": "The QoS level to be used when subscribing to the remote broker",
        "name": "remote_qos",
        "raw_default": 1,
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "qos()"
            },
            {
              "kind": "primitive",
              "name": "binary()"
            }
          ]
        }
      },
      {
        "desc": "\nSend messages to which topic of the local broker.<br/>\nTemplate with variables is allowed.\n",
        "name": "local_topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "\"${qos}\"",
          "oneliner": true
        },
        "desc": "\nThe QoS of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.\n",
        "name": "local_qos",
        "raw_default": "${qos}",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "qos()"
            },
            {
              "kind": "primitive",
              "name": "binary()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"${retain}\"",
          "oneliner": true
        },
        "desc": "\nThe 'retain' flag of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.\n",
        "name": "retain",
        "raw_default": "${retain}",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "boolean()"
            },
            {
              "kind": "primitive",
              "name": "binary()"
            }
          ]
        }
      },
      {
        "desc": "\nThe payload of the MQTT message to be sent.<br/>\nTemplate with variables is allowed.\n",
        "name": "payload",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      }
    ],
    "full_name": "ingress",
    "paths": [
      "bridges.mqtt.$name"
    ],
    "tags": []
  },
  {
    "desc": "Topology of MongoDB.",
    "fields": [
      {
        "default": {
          "hocon": "8",
          "oneliner": true
        },
        "desc": "Size of the connection pool.",
        "name": "pool_size",
        "raw_default": 8,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "Max Overflow.",
        "name": "max_overflow",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "non_neg_integer()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "overflow_ttl",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "overflow_check_period",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "local_threshold_ms",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "connect_timeout_ms",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "socket_timeout_ms",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "server_selection_timeout_ms",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "wait_queue_timeout_ms",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "heartbeat_frequency_ms",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Time interval, such as timeout or TTL.",
        "name": "min_heartbeat_frequency_ms",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      }
    ],
    "full_name": "topology",
    "paths": [
      "authentication.$INDEX.topology",
      "authorization.sources.$INDEX.topology",
      "gateway.coap.authentication.topology",
      "gateway.coap.listeners.dtls.$name.authentication.topology",
      "gateway.coap.listeners.udp.$name.authentication.topology",
      "gateway.exproto.authentication.topology",
      "gateway.exproto.listeners.dtls.$name.authentication.topology",
      "gateway.exproto.listeners.ssl.$name.authentication.topology",
      "gateway.exproto.listeners.tcp.$name.authentication.topology",
      "gateway.exproto.listeners.udp.$name.authentication.topology",
      "gateway.lwm2m.authentication.topology",
      "gateway.lwm2m.listeners.dtls.$name.authentication.topology",
      "gateway.lwm2m.listeners.udp.$name.authentication.topology",
      "gateway.mqttsn.authentication.topology",
      "gateway.mqttsn.listeners.dtls.$name.authentication.topology",
      "gateway.mqttsn.listeners.udp.$name.authentication.topology",
      "gateway.stomp.authentication.topology",
      "gateway.stomp.listeners.ssl.$name.authentication.topology",
      "gateway.stomp.listeners.tcp.$name.authentication.topology",
      "listeners.ssl.$name.authentication.$INDEX.topology",
      "listeners.tcp.$name.authentication.$INDEX.topology",
      "listeners.ws.$name.authentication.$INDEX.topology",
      "listeners.wss.$name.authentication.$INDEX.topology"
    ],
    "tags": []
  },
  {
    "desc": "License provisioned as a string.",
    "fields": [
      {
        "default": {
          "hocon": "\"MjIwMTExCjAKMTAKRXZhbHVhdGlvbgpjb250YWN0QGVtcXguaW8KZGVmYXVsdAoyMDIyMDQxOQoxODI1CjEwMDAK.MEQCICbgRVijCQov2hrvZXR1mk9Oa+tyV1F5oJ6iOZeSHjnQAiB9dUiVeaZekDOjztk+NCWjhk4PG8tWfw2uFZWruSzD6g==\"",
          "oneliner": true
        },
        "desc": "License string",
        "name": "key",
        "raw_default": "MjIwMTExCjAKMTAKRXZhbHVhdGlvbgpjb250YWN0QGVtcXguaW8KZGVmYXVsdAoyMDIyMDQxOQoxODI1CjEwMDAK.MEQCICbgRVijCQov2hrvZXR1mk9Oa+tyV1F5oJ6iOZeSHjnQAiB9dUiVeaZekDOjztk+NCWjhk4PG8tWfw2uFZWruSzD6g==",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "\"75%\"",
          "oneliner": true
        },
        "desc": "Low watermark limit below which license connection quota usage alarms are deactivated",
        "name": "connection_low_watermark",
        "raw_default": [
          55,
          53,
          37
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:percent()"
        }
      },
      {
        "default": {
          "hocon": "\"80%\"",
          "oneliner": true
        },
        "desc": "High watermark limit above which license connection quota usage alarms are activated",
        "name": "connection_high_watermark",
        "raw_default": [
          56,
          48,
          37
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:percent()"
        }
      }
    ],
    "full_name": "key_license",
    "paths": [
      "license"
    ],
    "tags": [
      "License"
    ]
  },
  {
    "desc": "Settings for `conn_congestion` alarm.\n\nSometimes the MQTT connection (usually an MQTT subscriber) may\nget \"congested\", because there are too many packets to be sent.\nThe socket tries to buffer the packets until the buffer is\nfull. If more packets arrive after that, the packets will be\n\"pending\" in the queue, and we consider the connection\ncongested.\n\nNote: `sndbuf` can be set to larger value if the\nalarm is triggered too often.\nThe name of the alarm is of format `conn_congestion/<ClientID>/<Username>`,\nwhere the `<ClientID>` is the client ID of the congested MQTT connection,\nand `<Username>` is the username or `unknown_user`.",
    "fields": [
      {
        "desc": "Enable or disable connection congestion alarm.",
        "name": "enable_alarm",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Minimal time before clearing the alarm.<br/>The alarm is cleared only when there's no pending data in<br/>the queue, and at least <code>min_alarm_sustain_duration</code>milliseconds passed since the last time we considered the connection 'congested'.<br/>This is to avoid clearing and raising the alarm again too often.",
        "name": "min_alarm_sustain_duration",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "zone:conn_congestion",
    "paths": [
      "zones.$name.conn_congestion"
    ],
    "tags": []
  },
  {
    "desc": "This config controls the allowed maximum number of `CONNECT` packets received\nfrom the same clientid in a time frame defined by `window_time`.\nAfter the limit is reached, successive `CONNECT` requests are forbidden\n(banned) until the end of the time period defined by `ban_time`.",
    "fields": [
      {
        "desc": "Enable flapping connection detection feature.",
        "name": "enable",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "The maximum number of disconnects allowed for a MQTT Client in `window_time`",
        "name": "max_count",
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "desc": "The time window for flapping detection.",
        "name": "window_time",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "desc": "How long the flapping clientid will be banned.",
        "name": "ban_time",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "zone:flapping_detect",
    "paths": [
      "zones.$name.flapping_detect"
    ],
    "tags": []
  },
  {
    "desc": "Force garbage collection in MQTT connection process after\n they process certain number of messages or bytes of data.",
    "fields": [
      {
        "desc": "Enable forced garbage collection.",
        "name": "enable",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "GC the process after this many received messages.",
        "name": "count",
        "type": {
          "kind": "primitive",
          "name": "0..inf"
        }
      },
      {
        "desc": "GC the process after specified number of bytes have passed through.",
        "name": "bytes",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      }
    ],
    "full_name": "zone:force_gc",
    "paths": [
      "zones.$name.force_gc"
    ],
    "tags": []
  },
  {
    "desc": "When the process message queue length, or the memory bytes\nreaches a certain value, the process is forced to close.\n\nNote: \"message queue\" here refers to the \"message mailbox\"\nof the Erlang process, not the `mqueue` of QoS 1 and QoS 2.",
    "fields": [
      {
        "desc": "Enable `force_shutdown` feature.",
        "name": "enable",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Maximum message queue length.",
        "name": "max_message_queue_len",
        "type": {
          "kind": "primitive",
          "name": "0..inf"
        }
      },
      {
        "desc": "Total heap size",
        "name": "max_heap_size",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:wordsize()"
        }
      }
    ],
    "full_name": "zone:force_shutdown",
    "paths": [
      "zones.$name.force_shutdown"
    ],
    "tags": []
  },
  {
    "desc": "Global MQTT configuration.<br/>The configs here work as default values which can be overridden\nin <code>zone</code> configs",
    "fields": [
      {
        "desc": "After the TCP connection is established, if the MQTT CONNECT packet from the client is not received within the time specified by <code>idle_timeout</code>, the connection will be disconnected.",
        "name": "idle_timeout",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "singleton",
              "name": "infinity"
            },
            {
              "kind": "primitive",
              "name": "emqx_schema:duration()"
            }
          ]
        }
      },
      {
        "desc": "Maximum MQTT packet size allowed.",
        "name": "max_packet_size",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "desc": "Maximum allowed length of MQTT Client ID.",
        "name": "max_clientid_len",
        "type": {
          "kind": "primitive",
          "name": "23..65535"
        }
      },
      {
        "desc": "Maximum topic levels allowed.",
        "name": "max_topic_levels",
        "type": {
          "kind": "primitive",
          "name": "1..65535"
        }
      },
      {
        "desc": "Maximum QoS allowed.",
        "name": "max_qos_allowed",
        "type": {
          "kind": "primitive",
          "name": "qos()"
        }
      },
      {
        "desc": "Maximum topic alias, 0 means no topic alias supported.",
        "name": "max_topic_alias",
        "type": {
          "kind": "primitive",
          "name": "0..65535"
        }
      },
      {
        "desc": "Whether to enable support for MQTT retained message.",
        "name": "retain_available",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Whether to enable support for MQTT wildcard subscription.",
        "name": "wildcard_subscription",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Whether to enable support for MQTT shared subscription.",
        "name": "shared_subscription",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Whether to enable support for MQTT exclusive subscription.",
        "name": "exclusive_subscription",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Ignore loop delivery of messages for MQTT v3.1.1/v3.1.0, similar to <code>No Local</code> subscription option in MQTT 5.0.",
        "name": "ignore_loop_deliver",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Parse MQTT messages in strict mode.\nWhen set to true, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected",
        "name": "strict_mode",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Specify the response information returned to the client. This feature is disabled if is set to \"\". Applies only to clients using MQTT 5.0.",
        "name": "response_information",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "desc": "The keep alive that EMQX requires the client to use. If configured as <code>disabled</code>, it means that the keep alive specified by the client will be used. Requires <code>Server Keep Alive</code> in MQTT 5.0, so it is only applicable to clients using MQTT 5.0 protocol.",
        "name": "server_keepalive",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "integer()"
            },
            {
              "kind": "singleton",
              "name": "disabled"
            }
          ]
        }
      },
      {
        "desc": "The backoff multiplier used by the broker to determine the client keep alive timeout. If EMQX doesn't receive any packet in <code>Keep Alive * Backoff * 2</code> seconds, EMQX will close the current connection.",
        "name": "keepalive_backoff",
        "type": {
          "kind": "primitive",
          "name": "number()"
        }
      },
      {
        "desc": "Maximum number of subscriptions allowed per client.",
        "name": "max_subscriptions",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "1..inf"
            },
            {
              "kind": "singleton",
              "name": "infinity"
            }
          ]
        }
      },
      {
        "desc": "Force upgrade of QoS level according to subscription.",
        "name": "upgrade_qos",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Maximum number of QoS 1 and QoS 2 messages that are allowed to be delivered simultaneously before completing the acknowledgment.",
        "name": "max_inflight",
        "type": {
          "kind": "primitive",
          "name": "1..65535"
        }
      },
      {
        "desc": "Retry interval for QoS 1/2 message delivering.",
        "name": "retry_interval",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "desc": "For each publisher session, the maximum number of outstanding QoS 2 messages pending on the client to send PUBREL. After reaching this limit, new QoS 2 PUBLISH requests will be rejected with `147(0x93)` until either PUBREL is received or timed out.",
        "name": "max_awaiting_rel",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "integer()"
            },
            {
              "kind": "singleton",
              "name": "infinity"
            }
          ]
        }
      },
      {
        "desc": "For client to broker QoS 2 message, the time limit for the broker to wait before the `PUBREL` message is received. The wait is aborted after timed out, meaning the packet ID is freed for new `PUBLISH` requests. Receiving a stale `PUBREL` causes a warning level log. Note, the message is delivered to subscribers before entering the wait for PUBREL.",
        "name": "await_rel_timeout",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "desc": "Specifies how long the session will expire after the connection is disconnected, only for non-MQTT 5.0 connections.",
        "name": "session_expiry_interval",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "desc": "Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full.",
        "name": "max_mqueue_len",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "non_neg_integer()"
            },
            {
              "kind": "singleton",
              "name": "infinity"
            }
          ]
        }
      },
      {
        "desc": "Topic priorities. Priority number [1-255]\nThere's no priority table by default, hence all messages are treated equal.\n\n**NOTE**: Comma and equal signs are not allowed for priority topic names.\n**NOTE**: Messages for topics not in the priority table are treated as either highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.\n\n**Examples**:\nTo configure <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>\n",
        "name": "mqueue_priorities",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "map()"
            },
            {
              "kind": "singleton",
              "name": "disabled"
            }
          ]
        }
      },
      {
        "desc": "Default topic priority, which will be used by topics not in <code>Topic Priorities</code> (<code>mqueue_priorities</code>).",
        "name": "mqueue_default_priority",
        "type": {
          "kind": "enum",
          "symbols": [
            "highest",
            "lowest"
          ]
        }
      },
      {
        "desc": "Specifies whether to store QoS 0 messages in the message queue while the connection is down but the session remains.",
        "name": "mqueue_store_qos0",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Whether to user Client ID as Username.\nThis setting takes effect later than <code>Use Peer Certificate as Username</code> (<code>peer_cert_as_username</code>) and <code>Use peer certificate as Client ID</code> (<code>peer_cert_as_clientid</code>).\n",
        "name": "use_username_as_clientid",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Use the CN, DN field in the peer certificate or the entire certificate content as Username. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: Take the CN field of the certificate as Username\n- <code>dn</code>: Take the DN field of the certificate as Username\n- <code>crt</code>: Take the content of the <code>DER</code> or <code>PEM</code> certificate as Username\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format as Username\n- <code>md5</code>: Take the MD5 value of the content of the <code>DER</code> or <code>PEM</code> certificate as Username\n",
        "name": "peer_cert_as_username",
        "type": {
          "kind": "enum",
          "symbols": [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ]
        }
      },
      {
        "desc": "Use the CN, DN field in the peer certificate or the entire certificate content as Client ID. Only works for the TLS connection.\nSupported configurations are the following:\n- <code>cn</code>: Take the CN field of the certificate as Client ID\n- <code>dn</code>: Take the DN field of the certificate as Client ID\n- <code>crt</code>: Take the content of the <code>DER</code> or <code>PEM</code> certificate as Client ID\n- <code>pem</code>: Convert <code>DER</code> certificate content to <code>PEM</code> format as Client ID\n- <code>md5</code>: Take the MD5 value of the content of the <code>DER</code> or <code>PEM</code> certificate as Client ID\n",
        "name": "peer_cert_as_clientid",
        "type": {
          "kind": "enum",
          "symbols": [
            "disabled",
            "cn",
            "dn",
            "crt",
            "pem",
            "md5"
          ]
        }
      }
    ],
    "full_name": "zone:mqtt",
    "paths": [
      "zones.$name.mqtt"
    ],
    "tags": []
  },
  {
    "desc": "Overload protection mechanism monitors the load of the system and temporarily\ndisables some features (such as accepting new connections) when the load is high.",
    "fields": [
      {
        "desc": "React on system overload or not.",
        "name": "enable",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "When at high load, some unimportant tasks could be delayed for execution, here set the duration in milliseconds precision.",
        "name": "backoff_delay",
        "type": {
          "kind": "primitive",
          "name": "0..inf"
        }
      },
      {
        "desc": "When at high load, skip forceful GC.",
        "name": "backoff_gc",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "When at high load, skip process hibernation.",
        "name": "backoff_hibernation",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "When at high load, close new incoming connections.",
        "name": "backoff_new_conn",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "zone:overload_protection",
    "paths": [
      "zones.$name.overload_protection"
    ],
    "tags": []
  },
  {
    "desc": "Enable/disable statistic data collection.\nStatistic data such as message receive/send count/rate etc. It provides insights of system performance and helps to diagnose issues. You can find statistic data from the dashboard, or from the '/stats' API.",
    "fields": [
      {
        "desc": "Enable/disable statistic data collection.",
        "name": "enable",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "zone:stats",
    "paths": [
      "zones.$name.stats"
    ],
    "tags": []
  },
  {
    "desc": "Settings for bcrypt password hashing algorithm.",
    "fields": [
      {
        "desc": "BCRYPT password hashing.",
        "name": "name",
        "type": {
          "kind": "singleton",
          "name": "bcrypt"
        }
      }
    ],
    "full_name": "authn-hash:bcrypt",
    "paths": [
      "authentication.$INDEX.password_hash_algorithm",
      "gateway.coap.authentication.password_hash_algorithm",
      "gateway.coap.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.coap.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.exproto.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.ssl.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.tcp.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.lwm2m.authentication.password_hash_algorithm",
      "gateway.lwm2m.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.lwm2m.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.mqttsn.authentication.password_hash_algorithm",
      "gateway.mqttsn.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.mqttsn.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.stomp.authentication.password_hash_algorithm",
      "gateway.stomp.listeners.ssl.$name.authentication.password_hash_algorithm",
      "gateway.stomp.listeners.tcp.$name.authentication.password_hash_algorithm",
      "listeners.ssl.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.tcp.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.ws.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.wss.$name.authentication.$INDEX.password_hash_algorithm"
    ],
    "tags": []
  },
  {
    "desc": "Settings for bcrypt password hashing algorithm (for DB backends with write capability).",
    "fields": [
      {
        "desc": "BCRYPT password hashing.",
        "name": "name",
        "type": {
          "kind": "singleton",
          "name": "bcrypt"
        }
      },
      {
        "default": {
          "hocon": "10",
          "oneliner": true
        },
        "desc": "Salt rounds for BCRYPT password generation.",
        "examples": [
          10
        ],
        "name": "salt_rounds",
        "raw_default": 10,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      }
    ],
    "full_name": "authn-hash:bcrypt_rw",
    "paths": [
      "authentication.$INDEX.password_hash_algorithm",
      "gateway.coap.authentication.password_hash_algorithm",
      "gateway.coap.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.coap.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.exproto.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.ssl.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.tcp.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.lwm2m.authentication.password_hash_algorithm",
      "gateway.lwm2m.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.lwm2m.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.mqttsn.authentication.password_hash_algorithm",
      "gateway.mqttsn.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.mqttsn.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.stomp.authentication.password_hash_algorithm",
      "gateway.stomp.listeners.ssl.$name.authentication.password_hash_algorithm",
      "gateway.stomp.listeners.tcp.$name.authentication.password_hash_algorithm",
      "listeners.ssl.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.tcp.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.ws.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.wss.$name.authentication.$INDEX.password_hash_algorithm"
    ],
    "tags": []
  },
  {
    "desc": "Settings for other password hashing algorithms.",
    "fields": [
      {
        "desc": "Simple password hashing algorithm.",
        "name": "name",
        "type": {
          "kind": "enum",
          "symbols": [
            "plain",
            "md5",
            "sha",
            "sha256",
            "sha512"
          ]
        }
      },
      {
        "default": {
          "hocon": "prefix",
          "oneliner": true
        },
        "desc": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
        "name": "salt_position",
        "raw_default": "prefix",
        "type": {
          "kind": "enum",
          "symbols": [
            "disable",
            "prefix",
            "suffix"
          ]
        }
      }
    ],
    "full_name": "authn-hash:other_algorithms",
    "paths": [
      "authentication.$INDEX.password_hash_algorithm",
      "gateway.coap.authentication.password_hash_algorithm",
      "gateway.coap.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.coap.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.exproto.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.ssl.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.tcp.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.lwm2m.authentication.password_hash_algorithm",
      "gateway.lwm2m.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.lwm2m.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.mqttsn.authentication.password_hash_algorithm",
      "gateway.mqttsn.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.mqttsn.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.stomp.authentication.password_hash_algorithm",
      "gateway.stomp.listeners.ssl.$name.authentication.password_hash_algorithm",
      "gateway.stomp.listeners.tcp.$name.authentication.password_hash_algorithm",
      "listeners.ssl.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.tcp.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.ws.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.wss.$name.authentication.$INDEX.password_hash_algorithm"
    ],
    "tags": []
  },
  {
    "desc": "Settings for PBKDF2 password hashing algorithm.",
    "fields": [
      {
        "desc": "PBKDF2 password hashing.",
        "name": "name",
        "type": {
          "kind": "singleton",
          "name": "pbkdf2"
        }
      },
      {
        "desc": "Specifies mac_fun for PBKDF2 hashing algorithm.",
        "name": "mac_fun",
        "type": {
          "kind": "enum",
          "symbols": [
            "md4",
            "md5",
            "ripemd160",
            "sha",
            "sha224",
            "sha256",
            "sha384",
            "sha512"
          ]
        }
      },
      {
        "desc": "Iteration count for PBKDF2 hashing algorithm.",
        "name": "iterations",
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      },
      {
        "desc": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
        "name": "dk_length",
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      }
    ],
    "full_name": "authn-hash:pbkdf2",
    "paths": [
      "authentication.$INDEX.password_hash_algorithm",
      "gateway.coap.authentication.password_hash_algorithm",
      "gateway.coap.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.coap.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.exproto.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.ssl.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.tcp.$name.authentication.password_hash_algorithm",
      "gateway.exproto.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.lwm2m.authentication.password_hash_algorithm",
      "gateway.lwm2m.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.lwm2m.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.mqttsn.authentication.password_hash_algorithm",
      "gateway.mqttsn.listeners.dtls.$name.authentication.password_hash_algorithm",
      "gateway.mqttsn.listeners.udp.$name.authentication.password_hash_algorithm",
      "gateway.stomp.authentication.password_hash_algorithm",
      "gateway.stomp.listeners.ssl.$name.authentication.password_hash_algorithm",
      "gateway.stomp.listeners.tcp.$name.authentication.password_hash_algorithm",
      "listeners.ssl.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.tcp.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.ws.$name.authentication.$INDEX.password_hash_algorithm",
      "listeners.wss.$name.authentication.$INDEX.password_hash_algorithm"
    ],
    "tags": []
  },
  {
    "desc": "PSK stands for 'Pre-Shared Keys'.\nThis config to enable TLS-PSK authentication.\n\nImportant! Make sure the SSL listener with only <code>tlsv1.2</code> enabled, and also PSK cipher suites\nconfigured, such as <code>RSA-PSK-AES256-GCM-SHA384</code>.\n\nSee listener SSL options config for more details.\n\nThe IDs and secrets can be provided from a file which is configurable by the <code>init_file</code> field.\n",
    "fields": [
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Whether to enable TLS PSK support",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "If init_file is specified, EMQX will import PSKs from the file into the built-in database at startup for use by the runtime.\nThe file has to be structured line-by-line, each line must be in the format of <code>PSKIdentity:SharedSecret</code>.\nFor example: <code>mydevice1:c2VjcmV0</code>",
        "name": "init_file",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "\":\"",
          "oneliner": true
        },
        "desc": "The separator between <code>PSKIdentity</code> and <code>SharedSecret</code> in the PSK file",
        "name": "separator",
        "raw_default": ":",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "50",
          "oneliner": true
        },
        "desc": "The size of each chunk used to import to the built-in database from PSK file",
        "name": "chunk_size",
        "raw_default": 50,
        "type": {
          "kind": "primitive",
          "name": "integer()"
        }
      }
    ],
    "full_name": "authn-psk:psk_authentication",
    "paths": [
      "psk_authentication"
    ],
    "tags": []
  },
  {
    "desc": "After the device logs in successfully, the subscription is automatically completed for the device through the pre-defined subscription representation. Supports the use of placeholders.",
    "fields": [
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "After the device logs in successfully, the subscription is automatically completed for the device through the pre-defined subscription representation. Supports the use of placeholders.",
        "name": "topics",
        "raw_default": [],
        "type": {
          "elements": {
            "kind": "struct",
            "name": "auto_subscribe:topic"
          },
          "kind": "array"
        }
      }
    ],
    "full_name": "auto_subscribe",
    "paths": [
      "auto_subscribe"
    ],
    "tags": []
  },
  {
    "desc": "Topic name, placeholders are supported. For example: client/${clientid}/username/${username}/host/${host}/port/${port}\nRequired field, and cannot be empty string",
    "fields": [
      {
        "desc": "Topic name, placeholders are supported. For example: client/${clientid}/username/${username}/host/${host}/port/${port}\nRequired field, and cannot be empty string",
        "examples": [
          "/clientid/${clientid}/username/${username}/host/${host}/port/${port}"
        ],
        "name": "topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "Default value 0. Quality of service.\nAt most once (0)\nAt least once (1)\nExactly once (2)",
        "name": "qos",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "qos()"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "Default value 0. This option is used to specify whether the server forwards the retained message to the client when establishing a subscription.\nRetain Handling is equal to 0, as long as the client successfully subscribes, the server will send the retained message.\nRetain Handling is equal to 1, if the client successfully subscribes and this subscription does not exist previously, the server sends the retained message. After all, sometimes the client re-initiate the subscription just to change the QoS, but it does not mean that it wants to receive the reserved messages again.\nRetain Handling is equal to 2, even if the client successfully subscribes, the server does not send the retained message.",
        "name": "rh",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "0..2"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "Default value 0. This option is used to specify whether the server retains the RETAIN mark when forwarding messages to the client, and this option does not affect the RETAIN mark in the retained message. Therefore, when the option Retain As Publish is set to 0, the client will directly distinguish whether this is a normal forwarded message or a retained message according to the RETAIN mark in the message, instead of judging whether this message is the first received after subscribing(the forwarded message may be sent before the retained message, which depends on the specific implementation of different brokers).",
        "name": "rap",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "0..1"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "Default value 0.\nMQTT v3.1.1\uff1a if you subscribe to the topic published by yourself, you will receive all messages that you published.\nMQTT v5: if you set this option as 1 when subscribing, the server will not forward the message you published to you.",
        "name": "nl",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "0..1"
        }
      }
    ],
    "full_name": "auto_subscribe:topic",
    "paths": [
      "auto_subscribe.topics.$INDEX"
    ],
    "tags": []
  },
  {
    "desc": "Configuration for an HTTP bridge.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable or disable this bridge",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "egress",
          "oneliner": true
        },
        "desc": "The direction of this bridge, MUST be 'egress'",
        "name": "direction",
        "raw_default": "egress",
        "type": {
          "kind": "singleton",
          "name": "egress"
        }
      },
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "The timeout when connecting to the HTTP server.",
        "name": "connect_timeout",
        "raw_default": [
          49,
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "desc": "Deprecated since 5.0.4.",
        "name": "retry_interval",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      },
      {
        "default": {
          "hocon": "random",
          "oneliner": true
        },
        "desc": "The type of the pool. Can be one of `random`, `hash`.",
        "name": "pool_type",
        "raw_default": "random",
        "type": {
          "kind": "primitive",
          "name": "emqx_connector_http:pool_type()"
        }
      },
      {
        "default": {
          "hocon": "8",
          "oneliner": true
        },
        "desc": "The pool size.",
        "name": "pool_size",
        "raw_default": 8,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "100",
          "oneliner": true
        },
        "desc": "A positive integer. Whether to send HTTP requests continuously, when set to 1, it means that after each HTTP request is sent, you need to wait for the server to return and then continue to send the next request.",
        "name": "enable_pipelining",
        "raw_default": 100,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "desc": "\nIf the request is provided, the caller can send HTTP requests via\n<code>emqx_resource:query(ResourceId, {send_message, BridgeId, Message})</code>\n",
        "name": "request",
        "type": {
          "kind": "struct",
          "name": "connector-http:request"
        }
      },
      {
        "default": {
          "hocon": "{enable = false}",
          "oneliner": true
        },
        "desc": "SSL connection settings.",
        "name": "ssl",
        "raw_default": {
          "enable": false
        },
        "type": {
          "kind": "struct",
          "name": "broker:ssl_client_opts"
        }
      },
      {
        "desc": "\nThe URL of the HTTP Bridge.<br/>\nTemplate with variables is allowed in the path, but variables cannot be used in the scheme, host,\nor port part.<br/>\nFor example, <code> http://localhost:9901/${topic} </code> is allowed, but\n<code> http://${host}:9901/message </code> or <code> http://localhost:${port}/message </code>\nis not allowed.\n",
        "name": "url",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "\nThe MQTT topic filter to be forwarded to the HTTP server. All MQTT 'PUBLISH' messages with the topic\nmatching the local_topic will be forwarded.<br/>\nNOTE: if this bridge is used as the action of a rule (EMQX rule engine), and also local_topic is\nconfigured, then both the data got from the rule and the MQTT messages that match local_topic\nwill be forwarded.\n",
        "name": "local_topic",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "post",
          "oneliner": true
        },
        "desc": "\nThe method of the HTTP request. All the available methods are: post, put, get, delete.<br/>\nTemplate with variables is allowed.<br/>\n",
        "name": "method",
        "raw_default": "post",
        "type": {
          "kind": "enum",
          "symbols": [
            "post",
            "put",
            "get",
            "delete"
          ]
        }
      },
      {
        "default": {
          "hocon": "{\n  accept = \"application/json\"\n  \"cache-control\" = \"no-cache\"\n  connection = \"keep-alive\"\n  \"content-type\" = \"application/json\"\n  \"keep-alive\" = \"timeout=5\"\n}\n",
          "oneliner": false
        },
        "desc": "\nThe headers of the HTTP request.<br/>\nTemplate with variables is allowed.\n",
        "name": "headers",
        "raw_default": {
          "accept": "application/json",
          "cache-control": "no-cache",
          "connection": "keep-alive",
          "content-type": "application/json",
          "keep-alive": "timeout=5"
        },
        "type": {
          "kind": "primitive",
          "name": "map()"
        }
      },
      {
        "default": {
          "hocon": "\"${payload}\"",
          "oneliner": true
        },
        "desc": "\nThe body of the HTTP request.<br/>\nTemplate with variables is allowed.\n",
        "name": "body",
        "raw_default": "${payload}",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "2",
          "oneliner": true
        },
        "desc": "HTTP request max retry times if failed.",
        "name": "max_retries",
        "raw_default": 2,
        "type": {
          "kind": "primitive",
          "name": "non_neg_integer()"
        }
      },
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "HTTP request timeout.",
        "name": "request_timeout",
        "raw_default": "15s",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      }
    ],
    "full_name": "bridge:config",
    "paths": [
      "bridges.webhook.$name"
    ],
    "tags": []
  },
  {
    "desc": "",
    "fields": [
      {
        "desc": "HTTP method.",
        "name": "method",
        "type": {
          "kind": "enum",
          "symbols": [
            "post",
            "put",
            "get",
            "delete"
          ]
        }
      },
      {
        "desc": "URL path.",
        "name": "path",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "HTTP request body.",
        "name": "body",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "List of HTTP headers.",
        "name": "headers",
        "type": {
          "kind": "primitive",
          "name": "map()"
        }
      },
      {
        "desc": "Max retry times if error on sending request.",
        "name": "max_retries",
        "type": {
          "kind": "primitive",
          "name": "non_neg_integer()"
        }
      },
      {
        "desc": "HTTP request timeout.",
        "name": "request_timeout",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      }
    ],
    "full_name": "connector-http:request",
    "paths": [
      "authentication.$INDEX.request",
      "authorization.sources.$INDEX.request",
      "bridges.webhook.$name.request",
      "gateway.coap.authentication.request",
      "gateway.coap.listeners.dtls.$name.authentication.request",
      "gateway.coap.listeners.udp.$name.authentication.request",
      "gateway.exproto.authentication.request",
      "gateway.exproto.listeners.dtls.$name.authentication.request",
      "gateway.exproto.listeners.ssl.$name.authentication.request",
      "gateway.exproto.listeners.tcp.$name.authentication.request",
      "gateway.exproto.listeners.udp.$name.authentication.request",
      "gateway.lwm2m.authentication.request",
      "gateway.lwm2m.listeners.dtls.$name.authentication.request",
      "gateway.lwm2m.listeners.udp.$name.authentication.request",
      "gateway.mqttsn.authentication.request",
      "gateway.mqttsn.listeners.dtls.$name.authentication.request",
      "gateway.mqttsn.listeners.udp.$name.authentication.request",
      "gateway.stomp.authentication.request",
      "gateway.stomp.listeners.ssl.$name.authentication.request",
      "gateway.stomp.listeners.tcp.$name.authentication.request",
      "listeners.ssl.$name.authentication.$INDEX.request",
      "listeners.tcp.$name.authentication.$INDEX.request",
      "listeners.ws.$name.authentication.$INDEX.request",
      "listeners.wss.$name.authentication.$INDEX.request"
    ],
    "tags": []
  },
  {
    "desc": "Generic configuration for the connector.",
    "fields": [
      {
        "default": {
          "hocon": "cluster_shareload",
          "oneliner": true
        },
        "desc": "\nThe mode of the MQTT Bridge.<br/>\n\n- cluster_shareload: create an MQTT connection on each node in the emqx cluster.<br/>\nIn 'cluster_shareload' mode, the incoming load from the remote broker is shared by\nusing shared subscription.<br/>\nNote that the 'clientid' is suffixed by the node name, this is to avoid\nclientid conflicts between different nodes. And we can only use shared subscription\ntopic filters for <code>remote_topic</code> of ingress connections.\n",
        "name": "mode",
        "raw_default": "cluster_shareload",
        "type": {
          "kind": "enum",
          "symbols": [
            "cluster_shareload"
          ]
        }
      },
      {
        "desc": "The host and port of the remote MQTT broker",
        "name": "server",
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:host_port()"
        }
      },
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "Reconnect interval. Delay for the MQTT bridge to retry establishing the connection in case of transportation failure. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
        "name": "reconnect_interval",
        "raw_default": [
          49,
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "v4",
          "oneliner": true
        },
        "desc": "The MQTT protocol version",
        "name": "proto_ver",
        "raw_default": "v4",
        "type": {
          "kind": "enum",
          "symbols": [
            "v3",
            "v4",
            "v5"
          ]
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nIf enable bridge mode.\nNOTE: This setting is only for MQTT protocol version older than 5.0, and the remote MQTT\nbroker MUST support this feature.\n    ",
        "name": "bridge_mode",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "The username of the MQTT protocol",
        "name": "username",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "desc": "The password of the MQTT protocol",
        "name": "password",
        "type": {
          "kind": "primitive",
          "name": "binary()"
        }
      },
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "The clean-start or the clean-session of the MQTT protocol",
        "name": "clean_start",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"300s\"",
          "oneliner": true
        },
        "desc": "MQTT Keepalive. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
        "name": "keepalive",
        "raw_default": [
          51,
          48,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "Message retry interval. Delay for the MQTT bridge to retry sending the QoS1/QoS2 messages in case of ACK not received. Time interval is a string that contains a number followed by time unit:<br/>- `ms` for milliseconds,\n- `s` for seconds,\n- `m` for minutes,\n- `h` for hours;\n<br/>or combination of whereof: `1h5m0s`",
        "name": "retry_interval",
        "raw_default": [
          49,
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "32",
          "oneliner": true
        },
        "desc": "Max inflight (sent, but un-acked) messages of the MQTT protocol",
        "name": "max_inflight",
        "raw_default": 32,
        "type": {
          "kind": "primitive",
          "name": "non_neg_integer()"
        }
      },
      {
        "name": "replayq",
        "type": {
          "kind": "struct",
          "name": "connector-mqtt:replayq"
        }
      },
      {
        "default": {
          "hocon": "{enable = false}",
          "oneliner": true
        },
        "desc": "SSL connection settings.",
        "name": "ssl",
        "raw_default": {
          "enable": false
        },
        "type": {
          "kind": "struct",
          "name": "broker:ssl_client_opts"
        }
      }
    ],
    "full_name": "connector-mqtt:connector",
    "paths": [
      "bridges.mqtt.$name.connector",
      "connectors.mqtt.$name"
    ],
    "tags": []
  },
  {
    "desc": "Queue messages in disk files.",
    "fields": [
      {
        "desc": "\nThe dir where the replayq file saved.<br/>\nSet to 'false' disables the replayq feature.\n",
        "name": "dir",
        "type": {
          "kind": "union",
          "members": [
            {
              "kind": "primitive",
              "name": "boolean()"
            },
            {
              "kind": "primitive",
              "name": "string()"
            }
          ]
        }
      },
      {
        "default": {
          "hocon": "\"100MB\"",
          "oneliner": true
        },
        "desc": "\nThe size in bytes of a single segment.<br/>\nA segment is mapping to a file in the replayq dir. If the current segment is full, a new segment\n(file) will be opened to write.\n",
        "name": "seg_bytes",
        "raw_default": [
          49,
          48,
          48,
          77,
          66
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "\nIn offload mode, the disk queue is only used to offload queue tail segments.<br/>\nThe messages are cached in the memory first, then it writes to the replayq files after the size of\nthe memory cache reaches 'seg_bytes'.\n",
        "name": "offload",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "connector-mqtt:replayq",
    "paths": [
      "bridges.mqtt.$name.connector.replayq",
      "connectors.mqtt.$name.replayq"
    ],
    "tags": []
  },
  {
    "desc": "\nManage EMQX plugins.<br/>\nPlugins can be pre-built as a part of EMQX package,\nor installed as a standalone package in a location specified by\n<code>install_dir</code> config key<br/>\nThe standalone-installed plugins are referred to as 'external' plugins.\n",
    "fields": [
      {
        "default": {
          "hocon": "[]",
          "oneliner": true
        },
        "desc": "An array of plugins in the desired states.<br/>\nThe plugins are started in the defined order",
        "name": "states",
        "raw_default": [],
        "type": {
          "elements": {
            "kind": "struct",
            "name": "plugin:state"
          },
          "kind": "array"
        }
      },
      {
        "default": {
          "hocon": "\"plugins\"",
          "oneliner": true
        },
        "desc": "\nThe installation directory for the external plugins.\nThe plugin beam files and configuration files should reside in\nthe subdirectory named as <code>emqx_foo_bar-0.1.0</code>.\n<br/>\nNOTE: For security reasons, this directory should **NOT** be writable\nby anyone except <code>emqx</code> (or any user which runs EMQX).\n",
        "name": "install_dir",
        "raw_default": [
          112,
          108,
          117,
          103,
          105,
          110,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "\"5s\"",
          "oneliner": true
        },
        "desc": "Check interval: check if the status of the plugins in the cluster is consistent, <br/>\nif the results of 3 consecutive checks are not consistent, then alarm.\n",
        "name": "check_interval",
        "raw_default": [
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration()"
        }
      }
    ],
    "full_name": "plugin:plugins",
    "paths": [
      "plugins"
    ],
    "tags": []
  },
  {
    "desc": "A per-plugin config to describe the desired state of the plugin.",
    "fields": [
      {
        "desc": "The {name}-{version} of the plugin.<br/>\nIt should match the plugin application name-version as the for the plugin release package name<br/>\nFor example: my_plugin-0.1.0.\n",
        "name": "name_vsn",
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "desc": "Set to 'true' to enable this plugin",
        "name": "enable",
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "plugin:state",
    "paths": [
      "plugins.states.$INDEX"
    ],
    "tags": []
  },
  {
    "desc": "Settings for reporting metrics to Prometheus",
    "fields": [
      {
        "default": {
          "hocon": "\"http://127.0.0.1:9091\"",
          "oneliner": true
        },
        "desc": "URL of Prometheus server",
        "name": "push_gateway_server",
        "raw_default": [
          104,
          116,
          116,
          112,
          58,
          47,
          47,
          49,
          50,
          55,
          46,
          48,
          46,
          48,
          46,
          49,
          58,
          57,
          48,
          57,
          49
        ],
        "type": {
          "kind": "primitive",
          "name": "string()"
        }
      },
      {
        "default": {
          "hocon": "\"15s\"",
          "oneliner": true
        },
        "desc": "Data reporting interval",
        "name": "interval",
        "raw_default": [
          49,
          53,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Turn Prometheus data pushing on or off",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      }
    ],
    "full_name": "prometheus",
    "paths": [
      "prometheus"
    ],
    "tags": []
  },
  {
    "desc": "Retainer batching and rate limiting.",
    "fields": [
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "Size of the batch when reading messages from storage. 0 means no limit.",
        "name": "batch_read_number",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "non_neg_integer()"
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "The number of retained messages can be delivered per batch.",
        "name": "batch_deliver_number",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "0..1000"
        }
      },
      {
        "desc": "The rate limiter name for retained messages' delivery.\nLimiter helps to avoid delivering too many messages to the client at once, which may cause the client to block or crash, or drop messages due to exceeding the size of the message queue.\nThe names of the available rate limiters are taken from the existing rate limiters under `limiter.batch`.\nIf this field is empty, limiter is not used.",
        "name": "batch_deliver_limiter",
        "type": {
          "kind": "struct",
          "name": "limiter:internal"
        }
      }
    ],
    "full_name": "retainer:flow_control",
    "paths": [
      "retainer.flow_control"
    ],
    "tags": []
  },
  {
    "desc": "Configuration of the internal database storing retained messages.",
    "fields": [
      {
        "default": {
          "hocon": "built_in_database",
          "oneliner": true
        },
        "desc": "Backend type.",
        "name": "type",
        "raw_default": "built_in_database",
        "type": {
          "kind": "singleton",
          "name": "built_in_database"
        }
      },
      {
        "default": {
          "hocon": "ram",
          "oneliner": true
        },
        "desc": "Specifies whether the messages are stored in RAM or persisted on disc.",
        "name": "storage_type",
        "raw_default": "ram",
        "type": {
          "kind": "enum",
          "symbols": [
            "ram",
            "disc"
          ]
        }
      },
      {
        "default": {
          "hocon": "0",
          "oneliner": true
        },
        "desc": "Maximum number of retained messages. 0 means no limit.",
        "name": "max_retained_messages",
        "raw_default": 0,
        "type": {
          "kind": "primitive",
          "name": "non_neg_integer()"
        }
      },
      {
        "default": {
          "hocon": "[\n  [1, 2, 3],\n  [1, 3],\n  [2, 3],\n  [3]\n]\n",
          "oneliner": false
        },
        "desc": "Retainer index specifications: list of arrays of positive ascending integers. Each array specifies an index. Numbers in an index specification are 1-based word positions in topics. Words from specified positions will be used for indexing.<br/>For example, it is good to have <code>[2, 4]</code> index to optimize <code>+/X/+/Y/...</code> topic wildcard subscriptions.",
        "examples": [
          [
            [
              2,
              4
            ],
            [
              1,
              3
            ]
          ]
        ],
        "name": "index_specs",
        "raw_default": [
          [
            1,
            2,
            3
          ],
          [
            1,
            3
          ],
          [
            2,
            3
          ],
          [
            3
          ]
        ],
        "type": {
          "kind": "primitive",
          "name": "[[integer()]]"
        }
      }
    ],
    "full_name": "retainer:mnesia_config",
    "paths": [
      "retainer.backend"
    ],
    "tags": []
  },
  {
    "desc": "Configuration related to handling `PUBLISH` packets with a `retain` flag set to 1.",
    "fields": [
      {
        "default": {
          "hocon": "true",
          "oneliner": true
        },
        "desc": "Enable retainer feature",
        "name": "enable",
        "raw_default": true,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"0s\"",
          "oneliner": true
        },
        "desc": "Message retention time. 0 means message will never be expired.",
        "name": "msg_expiry_interval",
        "raw_default": [
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "\"0s\"",
          "oneliner": true
        },
        "desc": "Periodic interval for cleaning up expired messages.\nNever clear if the value is 0.\n      ",
        "name": "msg_clear_interval",
        "raw_default": [
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "Flow control.",
        "name": "flow_control",
        "raw_default": {},
        "type": {
          "kind": "struct",
          "name": "retainer:flow_control"
        }
      },
      {
        "default": {
          "hocon": "\"1MB\"",
          "oneliner": true
        },
        "desc": "Maximum retained message size.",
        "name": "max_payload_size",
        "raw_default": [
          49,
          77,
          66
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:bytesize()"
        }
      },
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "When the retained flag of the `PUBLISH` message is set and Payload is empty,\nwhether to continue to publish the message.\nSee:\nhttp://docs.oasis-open.org/mqtt/mqtt/v3.1.1/os/mqtt-v3.1.1-os.html#_Toc398718038",
        "name": "stop_publish_clear_msg",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "desc": "Settings for the database storing the retained messages.",
        "name": "backend",
        "type": {
          "kind": "struct",
          "name": "retainer:mnesia_config"
        }
      }
    ],
    "full_name": "retainer",
    "paths": [
      "retainer"
    ],
    "tags": []
  },
  {
    "desc": "Configuration for `slow_subs` feature.",
    "fields": [
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable this feature",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"500ms\"",
          "oneliner": true
        },
        "desc": "The latency threshold for statistics",
        "name": "threshold",
        "raw_default": [
          53,
          48,
          48,
          109,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "\"300s\"",
          "oneliner": true
        },
        "desc": "The eviction time of the record, which in the statistics record table",
        "name": "expire_interval",
        "raw_default": [
          51,
          48,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "10",
          "oneliner": true
        },
        "desc": "The maximum number of records in the slow subscription statistics record table",
        "name": "top_k_num",
        "raw_default": 10,
        "type": {
          "kind": "primitive",
          "name": "pos_integer()"
        }
      },
      {
        "default": {
          "hocon": "whole",
          "oneliner": true
        },
        "desc": "The method to calculate the latency",
        "name": "stats_type",
        "raw_default": "whole",
        "type": {
          "kind": "enum",
          "symbols": [
            "whole",
            "internal",
            "response"
          ]
        }
      }
    ],
    "full_name": "slow_subs",
    "paths": [
      "slow_subs"
    ],
    "tags": []
  },
  {
    "desc": "StatsD metrics collection and push configuration.",
    "fields": [
      {
        "default": {
          "hocon": "false",
          "oneliner": true
        },
        "desc": "Enable or disable StatsD metrics collection and push service.",
        "name": "enable",
        "raw_default": false,
        "type": {
          "kind": "primitive",
          "name": "boolean()"
        }
      },
      {
        "default": {
          "hocon": "\"127.0.0.1:8125\"",
          "oneliner": true
        },
        "desc": "StatsD server address.",
        "name": "server",
        "raw_default": [
          49,
          50,
          55,
          46,
          48,
          46,
          48,
          46,
          49,
          58,
          56,
          49,
          50,
          53
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:host_port()"
        }
      },
      {
        "default": {
          "hocon": "\"30s\"",
          "oneliner": true
        },
        "desc": "The sampling interval for metrics.",
        "name": "sample_time_interval",
        "raw_default": [
          51,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "\"30s\"",
          "oneliner": true
        },
        "desc": "The push interval for metrics.",
        "name": "flush_time_interval",
        "raw_default": [
          51,
          48,
          115
        ],
        "type": {
          "kind": "primitive",
          "name": "emqx_schema:duration_ms()"
        }
      },
      {
        "default": {
          "hocon": "{}",
          "oneliner": true
        },
        "desc": "The tags for metrics.",
        "name": "tags",
        "raw_default": {},
        "type": {
          "kind": "primitive",
          "name": "map()"
        }
      }
    ],
    "full_name": "statsd",
    "paths": [
      "statsd"
    ],
    "tags": []
  }
]